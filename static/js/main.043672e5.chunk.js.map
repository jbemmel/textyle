{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","ui/canvas/tools.js","ui/sidebar/tabs.js","ui/tooltips.js","ui/constants.js","ui/canvas/Tool.js","resources/testIds.js","ui/common/styles.js","ui/canvas/Toolbar.js","redux/reducers/tileset.js","redux/reducers/canvas.js","redux/reducers/layers.js","redux/reducers/index.js","tilemap/index.js","utils/file.js","utils/tile.js","renderer/TileManager.js","idbTextureStore.js","redux/store.js","redux/middlewares.js","renderer/Shader.js","renderer/Texture.js","renderer/TextureManager.js","renderer/constants.js","renderer/Batch2D.js","renderer/Camera.js","renderer/Renderer.js","ui/canvas/WebGLCanvas.js","ui/canvas/EditorCanvas.js","ui/canvas/Canvas.js","ui/sidebar/TabButton.js","ui/sidebar/TabSelector.js","ui/common/Tab.js","redux/selectors.js","ui/common/CollapseTab.js","ui/sidebar/tileset/LayerListItem.js","ui/sidebar/tileset/LayerListFooter.js","ui/sidebar/tileset/LayerList.js","ui/sidebar/tileset/TilesetFooter.js","ui/sidebar/tileset/TilesetPreview.js","ui/common/Select.js","ui/sidebar/tileset/TilesetSelector.js","ui/common/Button.js","ui/common/FileInput.js","ui/sidebar/tileset/TilesetSettings.js","ui/sidebar/tileset/Edit.js","ui/common/SliderInput.js","ui/sidebar/map/MapSettings.js","ui/sidebar/import/ImportSettings.js","ui/sidebar/export/FormatSelector.js","ui/sidebar/export/formats.js","ui/sidebar/export/ExportSettings.js","ui/sidebar/project/ProjectSettings.js","ui/sidebar/Help.js","ui/sidebar/Sidebar.js","ui/App.js","index.js"],"names":["ADD_TILESET","LOAD_EXISTING_TILESETS","COMPLETE_TEXTURE_LOADING","SELECT_TILESET","DELETE_TILESET","SELECT_TILE","SELECT_TOOL","ADD_LAYER","DELETE_LAYER","SELECT_LAYER","MOVE_LAYER","TOGGLE_LAYER_VISIBILITY","selectTileset","name","type","payload","selectTool","tool","addLayer","x","y","width","height","selectLayer","DEFAULT_TOOL","PLACEMENT_TOOL","FILL_TOOL","MOVE_TOOL","PAN_TOOL","TAB_TILES","TAB_MAP","TAB_IMPORT","TAB_EXPORT","TAB_SETTINGS","TAB_HELP","tooltips","Map","set","tools","tabs","LOCAL_STORAGE_LAST_SELECTED_TILESET","Tool","iconPath","dispatch","useDispatch","selectedTool","useSelector","state","canvas","iconClasses","className","role","data-testid","onClick","data-tip","data-for","path","size","id","place","effect","delayShow","get","dividerBorderColor","titleBarHeight","Toolbar","mdiCursorDefaultOutline","mdiPencil","mdiPail","mdiCursorMove","initialState","tilesetNames","selectedTileset","selectedTile","hasLoadedTextures","selected","names","layers","lastIdx","combineReducers","tileset","action","newTilesetNames","filter","n","newSelected","length","idx","Math","max","indexOf","value","visible","newLayers","newIds","to","from","reorderedNames","splice","TilemapInstance","init","a","wasm","memory","map","Tilemap","new","hasInitialized","console","error","message","add_layer","layerId","fill","targetValue","dump","format","log","this","getImageBitmap","getTextureData","fileData","file","createImageBitmap","getTilePositionOnClick","e","tileSize","offset","bounds","target","getBoundingClientRect","floor","clientX","left","clientY","top","getTileUV","frame","frameSize","textureSize","frameWidth","frameHeight","hFrames","vFrames","maxFrames","frameX","frameY","topLeftX","topLeftY","TileManagerInstance","addTilesFromTileset","texture","bitmap","tileIndex","lastId","i","j","uv","tiles","loadTileset","tileStore","key","tile","textureStore","Store","getTextureNames","keys","textureNames","data","setTextureData","tilesetIndex","localStorage","setItem","deleteTextureData","del","getItem","removeItem","hasTexture","textureKeys","includes","loadTilesFromExistingTilesets","tilesets","reduxStore","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","next","createShader","gl","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","ShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","use","useProgram","setMat4","uniformName","uniformMatrix4fv","getUniformLocation","setInt","uniform1i","Texture","create","createTexture","bindTexture","TEXTURE_2D","pixel","Uint8Array","texImage2D","RGBA","UNSIGNED_BYTE","then","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","bind","getUV","TextureManager","add","indexMap","has","delete","UNIFORM_MVP","UNIFORM_SAMPLERS","ATTRIB_POSITION","ATTRIB_TEXTURE_COORD","ATTRIB_TEXTURE_IDX","ATTRIB_COLOR","BATCH_VERTEX_SHADER_SOURCE","BATCH_FRAGMENT_SHADER_SOURCE","Batch2D","shaderProgram","vertices","Float32Array","maxSprites","indices","indicesSize","Uint16Array","createIndices","VAO","createVertexArray","VBO","createBuffer","EBO","bindVertexArray","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","locPosition","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","locTextureCoord","locTextureIdx","locColor","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertexIndex","indexCount","begin","emplace","tileValue","position","color","tileData","r","g","b","textureIdx","textureManager","getIndex","flush","bufferSubData","subarray","render","forEach","activeTexture","TEXTURE0","drawElements","TRIANGLES","UNSIGNED_SHORT","textures","zoomLevels","Camera","setOrigin","origin","clientOrigin","moveTo","cameraZ","calculateMvp","setZoom","zoom","clampZoom","applyZoom","abs","zoomLevel","min","perceivedWidth","perceivedHeight","getMvp","mvp","getZoomLevel","computedPositionX","computedPositionY","mat4","ortho","projection","near","far","multiply","modelView","translate","RendererInstance","enable","BLEND","blendFunc","SRC_ALPHA","ONE_MINUS_SRC_ALPHA","camera","batch","setClearColor","clearColor","clear","COLOR_BUFFER_BIT","renderGrid","requestAnimationFrame","canvasWidth","canvasHeight","layersState","getState","layerName","layer","WebGLCanvas","tilesCanvasRef","useRef","useEffect","current","clientWidth","clientHeight","getContext","ref","EditorCanvas","editingCanvasRef","selectedLayer","refElement","cancelWheel","event","preventDefault","addEventListener","passive","removeEventListener","panToolStartHandler","panToolEndHandler","handleContinuousTools","undefined","onWheel","altKey","deltaY","onMouseDown","handleOneTimeTools","onDrag","draggable","Canvas","TabButton","routerPath","activeClassName","TabSelector","sections","icon","mdiViewModule","mdiMap","mdiUpload","mdiContentSave","mdiCog","mdiHelpCircleOutline","section","Tab","children","title","getLayersState","getLayers","getLayersNames","getLayerByName","getLayersByAddedTime","reverse","CollapseSection","useState","open","setOpen","mdiMenuDown","mdiMenuRight","sectionClass","onDoubleClick","isOpened","LayerItem","index","isSelected","handleLayerClick","handleEyeClick","mdiEye","mdiEyeOffOutline","selectedClassName","visibilityTestId","draggableId","provided","snapshop","style","cursor","draggableProps","innerRef","dragHandleProps","LayerListFooter","mdiPlaylistPlus","mdiDelete","LayerList","layerComponents","l","LayerListItem","dndArea","onDragEnd","destination","onBeforeDragStart","droppableId","droppableProps","placeholder","TilesetFooter","TilesetPreview","setSelectedTile","setTilesetIndex","tilegridCanvasRef","tilesetCanvasRef","tilesetCanvas","tilegridCanvas","reader","FileReader","onload","image","Image","drawImage","tileDimensions","context","strokeStyle","lineWidth","beginPath","lineTo","stroke","drawGridLines","src","result","readAsDataURL","fillStyle","clearRect","fillRect","onMouseUp","tilePos","Select","options","onChange","TilesetSelector","lastSelectedTileset","push","Button","text","FileInput","onUpload","opacity","overflow","zIndex","htmlFor","TilesetManager","onTilesetUpload","files","Edit","TilesetSettings","SliderInput","props","MapSettings","setTileSize","ImportSettings","FormatSelector","onOptionSelected","formatOptions","ExportSettings","setFormat","handleExport","rawData","filename","blob","Blob","document","createElement","href","URL","createObjectURL","download","click","ProjectSettings","Help","Sidebar","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.043672e5.chunk.js","sourcesContent":["export const ADD_TILESET = '[TILESET] Add one';\nexport const LOAD_EXISTING_TILESETS = '[TILESET] Load existing textures';\nexport const COMPLETE_TEXTURE_LOADING = '[TILESET] Texture loading complete';\nexport const SELECT_TILESET = '[TILESET] Select';\nexport const DELETE_TILESET = '[TILESET] Delete';\nexport const SELECT_TILE = '[TILE] Select';\n\nexport const SELECT_TOOL = '[TOOL] Select';\n\nexport const ADD_LAYER = '[LAYER] Add one';\nexport const DELETE_LAYER = '[LAYER] Delete';\nexport const SELECT_LAYER = '[LAYER] Select';\nexport const MOVE_LAYER = '[LAYER] Move';\nexport const TOGGLE_LAYER_VISIBILITY = '[LAYER] Toggle Visibility';\n\n","import {\n  ADD_TILESET,\n  LOAD_EXISTING_TILESETS,\n  COMPLETE_TEXTURE_LOADING,\n  SELECT_TILESET,\n  DELETE_TILESET,\n  SELECT_TILE,\n  SELECT_TOOL,\n  ADD_LAYER,\n  DELETE_LAYER,\n  SELECT_LAYER,\n  MOVE_LAYER,\n  TOGGLE_LAYER_VISIBILITY,\n} from 'redux/actionTypes';\n\nexport const addTileset = (name, data) => ({\n  type: ADD_TILESET,\n  payload: { name, data },\n});\n\nexport const loadExistingTilesets = names => ({\n  type: LOAD_EXISTING_TILESETS,\n  payload: { names },\n});\n\nexport const completeTextureLoading = names => ({\n  type: COMPLETE_TEXTURE_LOADING,\n  payload: {},\n});\n\nexport const selectTileset = name => ({\n  type: SELECT_TILESET,\n  payload: { name },\n});\n\nexport const deleteTileset = name => ({\n  type: DELETE_TILESET,\n  payload: { name },\n});\n\nexport const selectTile = value => ({\n  type: SELECT_TILE,\n  payload: { value },\n});\n\nexport const selectTool = tool => ({\n  type: SELECT_TOOL,\n  payload: { tool },\n});\n\nexport const addLayer = (name, x, y, width, height) => ({\n  type: ADD_LAYER,\n  payload: { name, x, y, width, height },\n});\n\nexport const deleteLayer = name => ({\n  type: DELETE_LAYER,\n  payload: { name },\n});\n\nexport const selectLayer = name => ({\n  type: SELECT_LAYER,\n  payload: { name },\n});\n\nexport const moveLayer = (name, to) => ({\n  type: MOVE_LAYER,\n  payload: { name, to },\n});\n\nexport const toggleLayerVisibility = name => ({\n  type: TOGGLE_LAYER_VISIBILITY,\n  payload: { name },\n});\n","export const DEFAULT_TOOL = 'DEFAULT_TOOL';\nexport const PLACEMENT_TOOL = 'PLACEMENT_TOOL';\nexport const FILL_TOOL = 'FILL_TOOL';\nexport const MOVE_TOOL = 'MOVE_TOOL';\nexport const PAN_TOOL = 'PAN_TOOL';\n\n","export const TAB_TILES = 'tiles';\nexport const TAB_MAP = 'map';\nexport const TAB_IMPORT = 'import';\nexport const TAB_EXPORT = 'save';\nexport const TAB_SETTINGS = 'settings';\nexport const TAB_HELP = 'help';\n","import * as tools from 'ui/canvas/tools';\nimport * as tabs from 'ui/sidebar/tabs';\n\nconst tooltips = new Map();\n\ntooltips.set(tools.DEFAULT_TOOL, 'default tool');\ntooltips.set(tools.PLACEMENT_TOOL, 'placement tool');\ntooltips.set(tools.FILL_TOOL, 'fill tool');\ntooltips.set(tools.MOVE_TOOL, 'move tool');\n\ntooltips.set(tabs.TAB_TILES, 'tab tiles');\ntooltips.set(tabs.TAB_MAP, 'tab map');\ntooltips.set(tabs.TAB_IMPORT, 'tab import');\ntooltips.set(tabs.TAB_EXPORT, 'tab export');\ntooltips.set(tabs.TAB_SETTINGS, 'settings tab');\ntooltips.set(tabs.TAB_HELP, 'help tab');\n\nexport default tooltips;\n","export const TILEMAP_CANVAS_ID = 'tilemap-canvas';\nexport const EDITOR_CANVAS_ID = 'editor-canvas';\nexport const GRID_CANVAS_ID = 'grid-canvas';\nexport const TILESET_CANVAS_ID = 'tileset-canvas';\nexport const LOCAL_STORAGE_LAST_SELECTED_TILESET = 'lastSelectedTileset';\n\nexport const ADD_TILESET_TITLE = 'Add Tileset';\n\nexport const GRID_COLOR = '#dddddd';\nexport const SELECTED_TILE_COLOR_OVERLAY = 'rgba(79, 70, 229, 0.4)';\n\nexport const TOOLTIP_DELAY = 600;\nexport const TOOLBAR_ICON_SIZE = 0.68;\n","import { connect, useDispatch, useSelector } from 'react-redux';\nimport { selectTool } from 'redux/actions';\nimport ReactTooltip from 'react-tooltip';\nimport Icon from '@mdi/react';\nimport tooltips from 'ui/tooltips';\nimport * as testIds from 'resources/testIds';\nimport {\n  TOOLTIP_DELAY,\n  TOOLBAR_ICON_SIZE,\n} from 'ui/constants';\n\nconst Tool = ({ iconPath, tool }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(state => state.canvas.selectedTool);\n\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleOnClick = () => {\n    dispatch(selectTool(tool));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const iconClasses = tool === selectedTool\n    ? 'text-indigo-400 hover:text-indigo-500'\n    : 'hover:text-indigo-500 cursor-pointer';\n  return (\n    <button className='px-4 py-2 cursor-default' role='button' data-testid={tool === selectedTool ? testIds.SELECTED_TOOL : ''}>\n      <div className={iconClasses} onClick={handleOnClick} data-tip data-for={tool} data-testid={tool}>\n        <Icon path={iconPath} size={TOOLBAR_ICON_SIZE} />\n      </div>\n      <ReactTooltip id={tool} place='bottom' effect='solid' delayShow={TOOLTIP_DELAY}>\n        {tooltips.get(tool)}\n      </ReactTooltip>\n    </button>\n  );\n}\n\nexport default Tool;\n\n","export const SELECTED_TOOL = 'selected-tool';\nexport const SELECT_TAG = 'select-tag';\nexport const ADD_LAYER_BUTTON = 'add-layer-button';\nexport const DELETE_LAYER_BUTTON = 'delete-layer-button';\nexport const HIDE_LAYER_BUTTON = 'hide-layer-button';\nexport const LAYER_VISIBLE = 'layer-visible';\nexport const LAYER_HIDDEN = 'layer-hidden';\n","export const dividerBorderColor = 'border-gray-600';\nexport const titleBarHeight = 'h-7';\nexport const toolbarHeight = titleBarHeight;\n","import React from 'react';\nimport Tool from 'ui/canvas/Tool';\nimport { dividerBorderColor, toolbarHeight } from 'ui/common/styles';\nimport {\n  mdiPencil,\n  mdiPail,\n  mdiSelect,\n  mdiCursorDefaultOutline,\n  mdiCursorMove,\n} from '@mdi/js';\n\nimport * as tools from 'ui/canvas/tools';\n\nconst Toolbar = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <nav className={`flex flex-row items-stretch bg-black border-b border-r ${dividerBorderColor} ${toolbarHeight}`}>\n      <div className='flex flex-row justify-start items-center flex-grow'>\n        <Tool iconPath={mdiCursorDefaultOutline} tool={tools.DEFAULT_TOOL} />\n        <Tool iconPath={mdiPencil} tool={tools.PLACEMENT_TOOL} />\n        <Tool iconPath={mdiPail} tool={tools.FILL_TOOL} />\n        <Tool iconPath={mdiCursorMove} tool={tools.MOVE_TOOL} />\n      </div>\n    </nav>\n  );\n}\n\nexport default Toolbar;\n","import {\n  ADD_TILESET,\n  LOAD_EXISTING_TILESETS,\n  COMPLETE_TEXTURE_LOADING,\n  SELECT_TILESET,\n  DELETE_TILESET,\n  SELECT_TILE,\n} from 'redux/actionTypes'\n\nconst initialState = {\n  tilesetNames: [],\n  selectedTileset: '',\n  selectedTile: -1,\n  hasLoadedTextures: false,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case LOAD_EXISTING_TILESETS: {\n      const { names } = action.payload;\n\n      return {\n        ...state,\n        tilesetNames: names,\n      };\n    }\n\n    case COMPLETE_TEXTURE_LOADING: {\n      return {\n        ...state,\n        hasLoadedTextures: true,\n      };\n    }\n\n    case ADD_TILESET: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        tilesetNames: [...state.tilesetNames, name],\n        selectedTileset: name,\n      };\n    }\n\n    case SELECT_TILESET: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        selectedTileset: name,\n      };\n    }\n\n    case DELETE_TILESET: {\n      const { name } = action.payload;\n      const newTilesetNames = state.tilesetNames.filter(n => n !== name);\n\n      let newSelected = state.selectedTileset;\n\n      // If the selected layer is the layer we are deleting and\n      // it is not the last layer, select a new index.\n      if (newSelected === name && newTilesetNames.length > 0) {\n        const idx = Math.max(state.tilesetNames.indexOf(name) - 1, 0);\n        newSelected = newTilesetNames[idx];\n      }\n      else if (newTilesetNames.length == 0) {\n        newSelected = '';\n      }\n\n      return {\n        ...state,\n        selectedTileset: newSelected,\n        tilesetNames: newTilesetNames,\n      };\n    }\n\n    case SELECT_TILE: {\n      const { value } = action.payload;\n      return {\n        ...state,\n        selectedTile: value,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  SELECT_TOOL,\n} from 'redux/actionTypes';\n\nimport {\n  DEFAULT_TOOL\n} from 'ui/canvas/tools';\n\nconst initialState = {\n  selectedTool: DEFAULT_TOOL,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case SELECT_TOOL: {\n      const { tool } = action.payload;\n      return {\n        ...state,\n        selectedTool: tool,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_LAYER,\n  DELETE_LAYER,\n  SELECT_LAYER,\n  MOVE_LAYER,\n  TOGGLE_LAYER_VISIBILITY,\n} from 'redux/actionTypes';\n\nconst initialState = {\n  selected: '',\n  names: [],\n  layers: {},\n  lastIdx: 0,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case ADD_LAYER: {\n      let { name } = action.payload;\n\n      // If name is not provided, add a default one\n      if (!name) {\n        name = `Layer ${state.lastIdx + 1}`;\n      }\n\n      return {\n        ...state,\n        names: [...state.names, name],\n        layers: {\n          ...state.layers,\n          [name]: {\n            id: state.lastIdx,\n            visible: true,\n          }\n        },\n        selected: name,\n        lastIdx: state.lastIdx + 1,\n      };\n    }\n\n    case DELETE_LAYER: {\n      const { name } = action.payload;\n      const { [name]: value, ...newLayers } = state.layers;\n      const newIds = state.names.filter(id => id !== name);\n\n      let newSelected = state.selected;\n\n      // If the selected layer is the layer we are deleting and\n      // it is not the last layer, select a new index.\n      if (newSelected === name && newIds.length > 0) {\n        const idx = Math.max(state.names.indexOf(name) - 1, 0);\n        newSelected = newIds[idx];\n      }\n      else if (newIds.length === 0) {\n        newSelected = '';\n      }\n\n      return {\n        ...state,\n        names: newIds,\n        layers: newLayers,\n        selected: newSelected,\n      };\n    }\n\n    case SELECT_LAYER: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        selected: name,\n      };\n    }\n\n    case MOVE_LAYER: {\n      const { name, to } = action.payload;\n      const from = state.names.indexOf(name);\n      const reorderedNames = state.names;\n\n      // If the layer exists\n      if (from !== -1) {\n        reorderedNames.splice(from, 1);\n        reorderedNames.splice(to, 0, name);\n      }\n\n      return {\n        ...state,\n        names: reorderedNames,\n      };\n    }\n\n    case TOGGLE_LAYER_VISIBILITY: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        layers: {\n          ...state.layers,\n          [name]: {\n            ...state.layers[name],\n            visible: !state.layers[name].visible,\n          }\n        }\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport tileset from 'redux/reducers/tileset';\nimport canvas from 'redux/reducers/canvas';\nimport layers from 'redux/reducers/layers';\n\nexport default combineReducers({ tileset, canvas, layers });\n","class Tilemap {\n  constructor() {\n    console.log('DEBUG: CONSTRUCTING GRID');\n    this.hasInitialized = false;\n  }\n\n  init = async (width, height) => {\n    try {\n      this.wasm = await import('./pkg');\n      const { memory } = await import('./pkg/tilemap_bg');\n      this.map = this.wasm.Tilemap.new();\n      this.memory = memory;\n      this.hasInitialized = true;\n    } catch (err) {\n      console.error(`[x] Error loading grid: ${err.message}`);\n    }\n  }\n\n  width = () => {\n    return this.map.width();\n  }\n\n  height = () => {\n    return this.map.height();\n  }\n\n  addLayer = (x, y, width, height) => {\n    // Set default position to (0,0)\n    if (!x || !y) {\n      x = 0;\n      y = 0;\n    }\n\n    // Set default size to the map size\n    if (!width || !height) {\n      width = TilemapInstance.width();\n      height = TilemapInstance.height();\n    }\n\n    this.map.add_layer(x, y, width, height);\n  }\n\n  get = (x, y, layerId) => {\n    return this.map.get(x, y, layerId);\n  }\n\n  set = (x, y, value, layerId) => {\n    this.map.set(x, y, value, layerId);\n  }\n\n  fill = (x, y, targetValue, layerId) => {\n    this.map.fill(x, y, targetValue, layerId);\n  }\n\n  dump = (format) => {\n    // TODO: Implement dump for whole map\n    //return this.grid.dump(format);\n  }\n}\n\nconst TilemapInstance = new Tilemap();\nexport default TilemapInstance;\n","import { getTextureData } from 'idbTextureStore';\n\nexport const fileToBase64 = file => {\n  if (!file) {\n    return null;\n  }\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n    reader.readAsDataURL(file);\n  });\n}\n\nexport const getImageBitmap = async name => {\n  try {\n    const fileData = await getTextureData(name);\n    if (!fileData.file) {\n      return null;\n    }\n\n    return createImageBitmap(fileData.file);\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n\n//export const getFileName = (fullpath) => {\n  //return fullpath.split('\\\\').pop().split('/').pop();\n//}\n\n\n//const base64ToFile = (data) => {\n  //const raw = window.atob(data);\n  //const rawLength = raw.length;\n  //const bytes = new Uint8Array(rawLength);\n\n  //for (let i = 0; i < rawLength; i++) {\n    //bytes[i] = raw.charCodeAt(i);\n  //}\n\n  //return bytes;\n//}\n\n","export const getTilePositionOnClick = (e, tileSize, offset) => {\n  offset = offset || [0.0, 0.0];\n  const bounds = e.target.getBoundingClientRect();\n  const w = Math.floor(e.target.width / tileSize[0]);\n  const x = Math.floor((e.clientX + offset[0] - bounds.left) / tileSize[0]);\n  const y = Math.floor((e.clientY + offset[1] - bounds.top) / tileSize[1]);\n  return [x, y];\n}\n\nexport const getTileUV = (frame, frameSize, textureSize) => {\n  // TODO: Better handling of out of bounds frame sizes\n  if (frameSize[0] >= textureSize[0] || frameSize[1] >= textureSize[1]) {\n    return [\n      [0.0, 0.0],\n      [0.0, 0.0],\n      [0.0, 0.0],\n      [0.0, 0.0],\n    ];\n  }\n\n  const frameWidth  = (frameSize[0] * 1.0) / textureSize[0];\n  const frameHeight = (frameSize[1] * 1.0) / textureSize[1];\n  const hFrames = Math.floor(textureSize[0] / frameSize[0]);\n  const vFrames = Math.floor(textureSize[1] / frameSize[1]);\n  const maxFrames = hFrames * vFrames;\n\n  const frameX = Math.floor(frame % hFrames);\n  const frameY = Math.floor((frame % maxFrames) / hFrames);\n  // Multiply the x coord of the frame in the texture atlas by the normalized value of the width one frame.\n  const topLeftX = frameX * (textureSize[0] / hFrames) * 1.0 / textureSize[0];\n  // Multiply the y coord of the frame in the tile map by the normalized value of the height one frame.\n  // Invert the value as the y axis is upwards for OpenGL\n  const topLeftY = frameY * (textureSize[1] / vFrames) / textureSize[1];\n\n  return [\n    [topLeftX, topLeftY], // top-left\n    [topLeftX + frameWidth, topLeftY], // top-right\n    [topLeftX + frameWidth, topLeftY + frameHeight], // bottom-right\n    [topLeftX, topLeftY + frameHeight], // bottom-left\n  ];\n}\n","import { getImageBitmap } from 'utils/file';\nimport { getTileUV } from 'utils/tile';\n\nclass TileManager {\n  constructor() {\n    this.tiles = new Map();\n    this.lastId = 0;\n  }\n\n  // Add tiles to local tileset and returns the tile index\n  addTilesFromTileset = async (texture, tileSize) => {\n    const bitmap = await getImageBitmap(texture);\n    const hFrames = Math.floor(bitmap.width / tileSize[0]);\n    const vFrames = Math.floor(bitmap.height / tileSize[1]);\n    const tileIndex = this.lastId;\n\n    for (let i = 0; i < vFrames; i++) {\n      for (let j = 0; j < hFrames; j++) {\n        const idx = i * hFrames + j;\n        const uv = getTileUV(idx, tileSize, [bitmap.width, bitmap.height])\n        this.tiles.set(this.lastId, {\n          size: tileSize,\n          texture: texture,\n          uv: uv,\n        });\n        ++this.lastId;\n      }\n    }\n\n    return tileIndex;\n  }\n\n  loadTileset = async tileset => {\n    const tiles = await get(tileset, tileStore);\n\n    if (!tiles) {\n      console.error(`The tileset does not exist: ${tileset}`);\n      return;\n    }\n\n    for (const [key, value] of tiles) {\n      this.tiles.set(key, value);\n    }\n  }\n\n  get = (tile) => {\n    return this.tiles.get(tile);\n  }\n\n};\n\nconst TileManagerInstance = new TileManager();\n\nexport default TileManagerInstance;\n","import { set, get, del, keys, Store } from 'idb-keyval';\nimport TileManagerInstance from 'renderer/TileManager';\nimport { selectTileset } from 'redux/actions';\nimport { LOCAL_STORAGE_LAST_SELECTED_TILESET } from 'ui/constants';\nimport reduxStore from 'redux/store';\nimport { completeTextureLoading } from 'redux/actions';\n\nconst textureStore = new Store('textures-store', 'textures');\n\n// Gets all texture names available\nexport const getTextureNames = async () => {\n  try {\n    const textureNames = await keys(textureStore);\n    return textureNames;\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n};\n\nexport const getTextureData = async (name) => {\n  try {\n    const data = await get(name, textureStore);\n    return data;\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n};\n\nexport const setTextureData = async (name, data) => {\n  // TODO: If the texture already exists, choose a new name\n  try {\n    await set(name, { file: data, tilesetIndex: TileManagerInstance.lastId }, textureStore);\n    await TileManagerInstance.addTilesFromTileset(name, [32, 32]);\n    localStorage.setItem(LOCAL_STORAGE_LAST_SELECTED_TILESET, name);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const deleteTextureData = async (name) => {\n  try {\n    await del(name, textureStore);\n    const lastSelectedTileset = localStorage.getItem(LOCAL_STORAGE_LAST_SELECTED_TILESET);\n    if (lastSelectedTileset === name) {\n      localStorage.removeItem(LOCAL_STORAGE_LAST_SELECTED_TILESET);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const hasTexture = async (name) => {\n  try {\n    const textureKeys = await keys(textureStore);\n    return textureKeys.includes(name);\n  } catch (err) {\n    console.error(err);\n    return false;\n  }\n}\n\nexport const loadTilesFromExistingTilesets = async (tilesets) => {\n  // Return if tiles where already loaded\n  if (TileManagerInstance.lastId > 0) {\n    return;\n  }\n  // Create tiles from textures\n  // Respects order of creation\n  // TODO: replace hardcoded 32 x 32 tile size with a user defined one\n  for (const tileset of tilesets) {\n    try {\n      const textureExists = await hasTexture(tileset);\n      if (!textureExists) {\n        continue;\n      }\n\n      const tilesetIndex = await TileManagerInstance.addTilesFromTileset(tileset, [32, 32]);\n\n      // Update idb texture with the new index\n      const data = await get(tileset, textureStore);\n      data.tilesetIndex = tilesetIndex;\n      await set(tileset, data, textureStore);\n    } catch (err) {\n      console.error(err);\n    }\n  }\n\n  reduxStore.dispatch(completeTextureLoading());\n}\n\n","import { compose, createStore, applyMiddleware } from 'redux';\nimport rootReducer from 'redux/reducers';\nimport {\n  tilemapReduxMiddleware,\n  idbReduxMiddleware,\n} from 'redux/middlewares';\n\n// Remove Redux Devtools in production\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(tilemapReduxMiddleware, idbReduxMiddleware)));\nexport default store;\n","import TilemapInstance from 'tilemap';\nimport {\n  setTextureData,\n  deleteTextureData,\n  loadTilesFromExistingTilesets\n} from 'idbTextureStore';\nimport {\n  ADD_TILESET,\n  DELETE_TILESET,\n  LOAD_EXISTING_TILESETS,\n  ADD_LAYER,\n  DELETE_LAYER,\n} from 'redux/actionTypes';\n\nexport const idbReduxMiddleware = store => next => action => {\n  switch(action.type) {\n    case ADD_TILESET: {\n      const { name, data } = action.payload || {};\n      setTextureData(name, data);\n      break;\n    }\n\n    case LOAD_EXISTING_TILESETS: {\n      const { names } = action.payload || {};\n      loadTilesFromExistingTilesets(names);\n      break;\n    }\n\n    case DELETE_TILESET: {\n      const { name } = action.payload || {};\n      deleteTextureData(name);\n      break;\n    }\n\n    default:\n      break;\n  }\n\n  return next(action);\n}\n\nexport const tilemapReduxMiddleware = store => next => action => {\n  switch(action.type) {\n    case ADD_LAYER: {\n      let { x, y, width, height } = action.payload || {};\n      TilemapInstance.addLayer(x, y, width, height);\n      break;\n    }\n\n    case DELETE_LAYER: {\n      // TODO: Implement layer deletion\n      break;\n    }\n\n    default:\n      break;\n  }\n\n  return next(action);\n}\n","function createShader(gl, source, type) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if ( !gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\n    const info = gl.getShaderInfoLog(shader);\n    console.error('Could not compile shader: ' + info);\n  }\n\n  return shader;\n}\n\nclass ShaderProgram {\n  constructor(gl, vertexSource, fragmentSource) {\n    this.gl = gl;\n    this.vertexSource = vertexSource;\n    this.fragmentSource = fragmentSource;\n    this.init();\n  }\n\n  init = () => {\n    const vertexShader = createShader(this.gl, this.vertexSource, this.gl.VERTEX_SHADER);\n    const fragmentShader = createShader(this.gl, this.fragmentSource, this.gl.FRAGMENT_SHADER);\n\n    this.id = this.gl.createProgram();\n    this.gl.attachShader(this.id, vertexShader);\n    this.gl.attachShader(this.id, fragmentShader);\n    this.gl.linkProgram(this.id);\n\n    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {\n      console.error('Unable to initialize the shader program: ' + this.gl.getProgramInfoLog(this.id));\n      return null;\n    }\n  }\n\n  use = () => {\n    this.gl.useProgram(this.id);\n  }\n\n  setMat4 = (uniformName, value) => {\n    this.gl.uniformMatrix4fv(this.gl.getUniformLocation(this.id, uniformName), false, value);\n  }\n\n  setInt = (uniformName, value) => {\n    this.gl.uniform1i(this.gl.getUniformLocation(this.id, uniformName), value);\n  }\n}\n\nexport default ShaderProgram;\n","import { getImageBitmap } from 'utils/file';\nimport { getTileUV } from 'utils/tile';\n\nclass Texture {\n  constructor(gl, name) {\n    this.name = name;\n    this.create(gl);\n  }\n\n  create = gl => {\n    this.id = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\n\n    this.width = 1;\n    this.height = 1;\n    const pixel = new Uint8Array([0, 0, 0, 0]);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n    getImageBitmap(this.name).then(bitmap => {\n      if (!bitmap) {\n        return;\n      }\n\n      this.width = bitmap.width;\n      this.height = bitmap.height;\n\n      gl.bindTexture(gl.TEXTURE_2D, this.id);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmap);\n\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    });\n  }\n\n  bind = (gl) => {\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\n  }\n\n  getUV = (frame, frameSize) => {\n    return getTileUV(frame, frameSize, [this.width, this.height]);\n    //// If the texture has not been initialized yet\n    //if (this.width == 1 && this.height == 1) {\n      //return [\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n      //];\n    //}\n\n    //const frameWidth  = (frameSize[0] * 1.0) / this.width;\n    //const frameHeight = (frameSize[1] * 1.0) / this.height;\n    //const hFrames = Math.floor(this.width / frameSize[0]);\n    //const vFrames = Math.floor(this.height / frameSize[1]);\n    //const maxFrames = hFrames * vFrames;\n\n    //const frameX = Math.floor(frame % hFrames);\n    //const frameY = Math.floor((frame % maxFrames) / hFrames);\n    //// Multiply the x coord of the frame in the texture atlas by the normalized value of the width one frame.\n    //const topLeftX = frameX * (this.width / hFrames) * 1.0 / this.width;\n    //// Multiply the y coord of the frame in the tile map by the normalized value of the height one frame.\n    //// Invert the value as the y axis is upwards for OpenGL\n    //const topLeftY = frameY * (this.height / vFrames) / this.height;\n\n    //return [\n      //[topLeftX, topLeftY],\n      //[topLeftX + frameWidth, topLeftY],\n      //[topLeftX + frameWidth, topLeftY + frameHeight],\n      //[topLeftX, topLeftY + frameHeight],\n    //];\n  }\n}\n\nexport default Texture;\n\n","import Texture from 'renderer/Texture';\n\nclass TextureManager {\n  constructor() {\n    this.map = new Map();\n    this.indexMap = new Map();\n  }\n\n  add = (gl, name) => {\n    this.indexMap.set(name, this.map.size);\n    this.map.set(name, new Texture(gl, name));\n  }\n\n  get(name) {\n    return this.map.get(name);\n  }\n\n  getIndex(name) {\n    return this.indexMap.get(name);\n  }\n\n  has(name) {\n    return this.map.has(name);\n  }\n\n  remove(name) {\n    this.map.delete(name);\n  }\n}\n\nexport default TextureManager;\n","export const UNIFORM_PROJECTION = 'uProjectionMatrix';\nexport const UNIFORM_MVP = 'uMVP';\nexport const UNIFORM_SAMPLERS = 'uSamplers';\n\nexport const ATTRIB_POSITION = 'aPosition';\nexport const ATTRIB_TEXTURE_COORD = 'aTextureCoord';\nexport const ATTRIB_TEXTURE_IDX = 'aTextureIdx';\nexport const ATTRIB_COLOR = 'aColor';\n\nexport const BATCH_VERTEX_SHADER_SOURCE = `#version 300 es\n\n      in vec2 ${ATTRIB_POSITION};\n      in float ${ATTRIB_TEXTURE_IDX};\n      in vec2 ${ATTRIB_TEXTURE_COORD};\n      in vec4 ${ATTRIB_COLOR};\n\n      out vec2 vTextureCoord;\n      out float vTextureIdx;\n      out vec4 vColor;\n\n      uniform mat4 ${UNIFORM_MVP};\n\n      void main() {\n        gl_Position = ${UNIFORM_MVP} * vec4(aPosition, 0.0, 1.0);\n        vTextureCoord = ${ATTRIB_TEXTURE_COORD};\n        vTextureIdx = ${ATTRIB_TEXTURE_IDX};\n        vColor = ${ATTRIB_COLOR};\n      }\n      `;\n\nexport const BATCH_FRAGMENT_SHADER_SOURCE = `#version 300 es\n\n      precision mediump float;\n\n      in vec2 vTextureCoord;\n      in float vTextureIdx;\n      in vec4 vColor;\n\n      out vec4 oColor;\n\n      uniform sampler2D ${UNIFORM_SAMPLERS}[11];\n\n      void main() {\n        vec4 finalColor = vec4(0.0);\n        int tid = int(vTextureIdx + 0.5);\n\n        switch (tid)\n        {\n          case 0:\n            finalColor = texture(${UNIFORM_SAMPLERS}[0], vTextureCoord);\n            break;\n          case 1:\n            finalColor = texture(${UNIFORM_SAMPLERS}[1], vTextureCoord);\n            break;\n          case 2:\n            finalColor = texture(${UNIFORM_SAMPLERS}[2], vTextureCoord);\n            break;\n          case 3:\n            finalColor = texture(${UNIFORM_SAMPLERS}[3], vTextureCoord);\n            break;\n          case 4:\n            finalColor = texture(${UNIFORM_SAMPLERS}[4], vTextureCoord);\n            break;\n          case 5:\n            finalColor = texture(${UNIFORM_SAMPLERS}[5], vTextureCoord);\n            break;\n          case 6:\n            finalColor = texture(${UNIFORM_SAMPLERS}[6], vTextureCoord);\n            break;\n          case 7:\n            finalColor = texture(${UNIFORM_SAMPLERS}[7], vTextureCoord);\n            break;\n          case 8:\n            finalColor = texture(${UNIFORM_SAMPLERS}[8], vTextureCoord);\n            break;\n          case 9:\n            finalColor = texture(${UNIFORM_SAMPLERS}[9], vTextureCoord);\n            break;\n          case 10:\n            finalColor = texture(${UNIFORM_SAMPLERS}[10], vTextureCoord);\n            break;\n        }\n\n        oColor = finalColor;\n      }\n      `;\n        \n","import TextureManager from 'renderer/TextureManager';\nimport TileManagerInstance from 'renderer/TileManager';\nimport {\n  ATTRIB_POSITION,\n  ATTRIB_TEXTURE_COORD,\n  ATTRIB_TEXTURE_IDX,\n  ATTRIB_COLOR,\n  UNIFORM_SAMPLERS,\n} from 'renderer/constants';\n\nconst createIndices = (indicesSize) => {\n  let offset = 0;\n  let indices = new Uint16Array(indicesSize);\n\n  for (let i = 0; i < indicesSize; i += 6)\n  {\n    indices[i]     = offset;\n    indices[i + 1] = offset + 1;\n    indices[i + 2] = offset + 2;\n\n    indices[i + 3] = offset;\n    indices[i + 4] = offset + 2;\n    indices[i + 5] = offset + 3;\n\n    offset += 4;\n  }\n\n  return indices;\n}\n\nexport default class Batch2D {\n  constructor(gl, shaderProgram) {\n    this.gl = gl;\n    this.shaderProgram = shaderProgram;\n    this.textures = [];\n    this.textureManager = new TextureManager();\n    this.create();\n  }\n\n  create = () => {\n    const maxSprites  = 10000;\n    const floatsPerVertex = 9;\n    const bytesPerVertex = 4 * floatsPerVertex;\n    const floatsPerSprite = floatsPerVertex * 4;\n    const totalFloats = maxSprites * floatsPerSprite;\n    const indicesSize = 6 * maxSprites;\n\n    this.vertices = new Float32Array(totalFloats);\n    this.indices = createIndices(indicesSize);\n\n    this.VAO = this.gl.createVertexArray();\n    this.VBO = this.gl.createBuffer();\n    this.EBO = this.gl.createBuffer();\n\n    this.gl.bindVertexArray(this.VAO);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VBO);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);\n\n    // Position\n    const locPosition = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_POSITION);\n    this.gl.vertexAttribPointer(locPosition, 2, this.gl.FLOAT, false, bytesPerVertex, 0);\n    this.gl.enableVertexAttribArray(locPosition);\n\n    // TextureCoord\n    const locTextureCoord = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_TEXTURE_COORD);\n    this.gl.vertexAttribPointer(locTextureCoord, 2, this.gl.FLOAT, false, bytesPerVertex, 2 * 4);\n    this.gl.enableVertexAttribArray(locTextureCoord);\n\n    // TextureIdx\n    const locTextureIdx = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_TEXTURE_IDX);\n    this.gl.vertexAttribPointer(locTextureIdx, 1, this.gl.FLOAT, false, bytesPerVertex, 4 * 4);\n    this.gl.enableVertexAttribArray(locTextureIdx);\n\n    // Color\n    const locColor = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_COLOR);\n    this.gl.vertexAttribPointer(locColor, 4, this.gl.FLOAT, false, bytesPerVertex, 5 * 4);\n    this.gl.enableVertexAttribArray(locColor);\n\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.EBO);\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.STATIC_DRAW);\n\n    // Used for emplacing tiles\n    this.vertexIndex = 0;\n\n    // Used for rendering\n    this.indexCount = 0;\n  }\n\n  begin = () => {\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VBO);\n  }\n\n  emplace = (tileValue, position, color) => {\n    const tileData = TileManagerInstance.get(tileValue);\n    if (!tileData) {\n      console.error(`Could not get tile data for tile ${tileData}`);\n      return;\n    }\n\n    let r = 0.0;\n    let g = 0.0;\n    let b = 0.0;\n    let a = 0.0;\n\n    if (color) {\n      r = color.r;\n      g = color.g;\n      b = color.b;\n      a = color.a;\n    }\n\n    let textureIdx = 0.0;\n\n    if (this.textureManager.has(tileData.texture)) {\n      textureIdx = this.textureManager.getIndex(tileData.texture);\n    }\n    else {\n      this.textureManager.add(this.gl, tileData.texture);\n      textureIdx = this.textureManager.getIndex(tileData.texture);\n    }\n\n    // Top left\n    this.vertices[this.vertexIndex++] = position[0];\n    this.vertices[this.vertexIndex++] = position[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[0][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[0][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Top right\n    this.vertices[this.vertexIndex++] = position[0] + tileData.size[0];\n    this.vertices[this.vertexIndex++] = position[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[1][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[1][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Bottom right\n    this.vertices[this.vertexIndex++] = position[0] + tileData.size[0];\n    this.vertices[this.vertexIndex++] = position[1] + tileData.size[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[2][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[2][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Bottom left\n    this.vertices[this.vertexIndex++] = position[0];\n    this.vertices[this.vertexIndex++] = position[1] + tileData.size[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[3][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[3][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    this.indexCount += 6;\n  }\n\n  flush = () => {\n    this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.vertices.subarray(0, this.vertexIndex));\n    this.vertexIndex = 0;\n  }\n\n  render = (shader) => {\n    if (this.indexCount === 0) {\n      return;\n    }\n\n    let idx = 0;\n    this.textureManager.map.forEach(texture => {\n      this.gl.activeTexture(this.gl.TEXTURE0 + idx);\n      texture.bind(this.gl);\n      this.shaderProgram.setInt(`${UNIFORM_SAMPLERS}[${idx}]`, idx);\n      ++idx;\n    });\n\n    this.gl.activeTexture(this.gl.TEXTURE0);\n\n    this.gl.bindVertexArray(this.VAO);\n    this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, 0);\n    this.indexCount = 0;\n  }\n}\n","import { mat4 } from 'gl-matrix';\n\nconst ZOOM_MAX = 5.0;\nconst ZOOM_MIN = 0.25;\nconst ZOOM_THRESHOLD = 10;\n\nconst zoomLevels = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75];\n\nclass Camera {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.zoomLevel = 3;\n    this.zoom = 0;\n    this.perceivedWidth = this.width;\n    this.perceivedHeight = this.height;\n    this.origin = [0.0, 0.0];\n    this.clientOrigin = [0.0, 0.0];\n    this.cameraZ = 80.0;\n    this.position = [0.0, 0.0, this.cameraZ];\n    this.near = 0.1;\n    this.far = 100.0;\n    this.projection = mat4.create();\n    this.modelView = mat4.create();\n    this.mvp = mat4.create();\n\n    mat4.translate(this.modelView, this.modelView, [0.0, 0.0, -this.cameraZ]);\n    this.calculateMvp();\n  }\n\n  setOrigin = (x, y) => {\n    this.origin = [this.position[0], this.position[1]];\n    this.clientOrigin = [x, y];\n  }\n\n  moveTo = (x, y) => {\n    this.position = [this.origin[0] + (this.clientOrigin[0] - x), this.origin[1] + (this.clientOrigin[1] - y), this.cameraZ];\n    this.calculateMvp();\n  }\n\n  setZoom = (zoom) => {\n    // Clamp zoom value\n    this.zoom = this.clampZoom(zoom);\n    this.calculateMvp();\n  }\n\n  applyZoom = (zoom) => {\n    this.zoom += zoom;\n\n    if (Math.abs(this.zoom) < ZOOM_THRESHOLD) {\n      return;\n    }\n\n    if (this.zoom < 0) {\n      this.zoomLevel = Math.max(0, this.zoomLevel - 1);\n    }\n    else if (this.zoom > 0) {\n      this.zoomLevel = Math.min(zoomLevels.length - 1, this.zoomLevel + 1);\n    }\n\n    this.perceivedWidth = this.width / zoomLevels[this.zoomLevel];\n    this.perceivedHeight = this.height / zoomLevels[this.zoomLevel];\n    this.zoom = 0;\n    this.calculateMvp();\n  }\n\n  getMvp = () => {\n    return this.mvp;\n  }\n\n  getZoomLevel = () => {\n    return zoomLevels[this.zoomLevel];\n  }\n\n  calculateMvp = () => {\n    // TODO: Anchor on center when zooming\n    const computedPositionX = this.position[0] / zoomLevels[this.zoomLevel];\n    const computedPositionY = this.position[1] / zoomLevels[this.zoomLevel];\n\n    mat4.ortho(this.projection,\n               computedPositionX,\n               this.perceivedWidth + computedPositionX,\n               this.perceivedHeight + computedPositionY,\n               computedPositionY,\n               this.near,\n               this.far);\n\n    //mat4.ortho(this.projection,\n              //(this.width - this.perceivedWidth) + this.position[0] / zoomLevels[this.zoomLevel],\n              //this.perceivedWidth + this.position[0] / zoomLevels[this.zoomLevel],\n              //this.perceivedHeight + this.position[1] / zoomLevels[this.zoomLevel],\n              //(this.height - this.perceivedHeight) + this.position[1] / zoomLevels[this.zoomLevel],\n              //this.near,\n              //this.far);\n\n    mat4.multiply(this.mvp, this.projection, this.modelView);\n  }\n};\n\nexport default Camera;\n","import store from 'redux/store';\nimport TilemapInstance from 'tilemap';\nimport ShaderProgram from 'renderer/Shader';\nimport Batch2D from 'renderer/Batch2D';\nimport Texture from 'renderer/Texture';\nimport Camera from 'renderer/Camera';\nimport {\n  UNIFORM_MVP,\n  BATCH_VERTEX_SHADER_SOURCE,\n  BATCH_FRAGMENT_SHADER_SOURCE,\n} from 'renderer/constants';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nclass Renderer {\n  hasInitialized = false\n\n  init = (gl) => {\n    console.log('DEBUG: CONSTRUCTING RENDERER');\n\n    this.gl = gl;\n    if (!this.gl) {\n      return;\n    }\n\n    this.gl.enable(this.gl.BLEND);\n    this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n\n    this.shaderProgram = new ShaderProgram(this.gl, BATCH_VERTEX_SHADER_SOURCE, BATCH_FRAGMENT_SHADER_SOURCE);\n    this.shaderProgram.use();\n\n    this.camera = new Camera(this.gl.canvas.width, this.gl.canvas.height);\n    //this.camera.setPosition(100, 100);\n\n    this.shaderProgram.setMat4(UNIFORM_MVP, this.camera.getMvp());\n\n    this.batch = new Batch2D(this.gl, this.shaderProgram);\n    this.hasInitialized = true;\n  }\n\n  setClearColor = (r, g, b, a) => {\n    this.gl.clearColor(r, g, b, a);\n  }\n\n  //updateViewport = (width, height) => {\n    //this.gl.viewport(0, 0, width, height);\n    //const projectionMatrix = mat4.create();\n    //mat4.ortho(projectionMatrix, 0, width, height, 0, 0.1, 100.0);\n    //this.shaderProgram.use();\n    //this.shaderProgram.setMat4(UNIFORM_PROJECTION, projectionMatrix);\n  //}\n\n  render = () => {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.renderGrid();\n    window.requestAnimationFrame(this.render);\n  }\n\n  renderGrid = () => {\n    // Return early if the wasm module hasn't loaded yet\n    if (!TilemapInstance.hasInitialized) {\n      return;\n    }\n\n    this.shaderProgram.use();\n\n    // TODO: Get offset and zoom from camera\n    // to get the actual tiles to render from rust\n    const canvasWidth = this.gl.canvas.width;\n    const canvasHeight = this.gl.canvas.height;\n    const layersState = store.getState().layers;\n    this.shaderProgram.setMat4(UNIFORM_MVP, this.camera.getMvp());\n\n    this.batch.begin();\n\n    for (const layerName of layersState.names) {\n      const layer = layersState.layers[layerName];\n      if (!layer.visible) {\n        continue;\n      }\n\n      if (layer.id >= 0) {\n        for (let i = 0, y = 0; y < canvasHeight; i++, y += tileSize[1]) {\n          for (let j = 0, x = 0; x < canvasWidth; j++, x += tileSize[0]) {\n            const value = TilemapInstance.get(j, i, layer.id);\n\n            if (value != -1) {\n              this.batch.emplace(value, [x, y]);\n            }\n          }\n        }\n      }\n    }\n\n\n    this.batch.flush();\n    this.batch.render(this.shaderProgram);\n  }\n}\n\nconst RendererInstance = new Renderer();\n\nexport default RendererInstance;\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addLayer } from 'redux/actions';\nimport RendererInstance from 'renderer/Renderer';\nimport TilemapInstance from 'tilemap';\nimport { TILEMAP_CANVAS_ID } from 'ui/constants';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nconst WebGLCanvas = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const tilesCanvasRef = useRef();\n\n  // ====================================\n  // Logic\n  // ====================================\n  useEffect(() => {\n    if (!tilesCanvasRef.current) {\n      return;\n    }\n\n    // Update canvas sizes\n    tilesCanvasRef.current.width = tilesCanvasRef.current.clientWidth;\n    tilesCanvasRef.current.height = tilesCanvasRef.current.clientHeight;\n\n    if (!TilemapInstance.hasInitialized) {\n      // TODO: Remove dispatch from here and add a layer only if there isn't any\n      TilemapInstance.init().then(() => {\n        dispatch(addLayer(null, 0, 0, Math.floor(tilesCanvasRef.current.width / tileSize[0]) + 1,\n                                      Math.floor(tilesCanvasRef.current.height / tileSize[1]) + 1));\n      });\n    }\n\n    if (!RendererInstance.hasInitialized) {\n      RendererInstance.init(tilesCanvasRef.current.getContext('webgl2'));\n      //RendererInstance.setClearColor(55.0 / 255.0, 65.0 / 255.0, 81.0 / 255.0, 1.0);\n      RendererInstance.setClearColor(31.0 / 255.0, 41.0 / 255.0, 55.0 / 255.0, 1.0);\n      window.requestAnimationFrame(RendererInstance.render);\n    }\n  }, [dispatch]);\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <canvas id={TILEMAP_CANVAS_ID} ref={tilesCanvasRef} className='col-span-full row-span-full z-0 w-full h-full' />\n  );\n}\n    //<AbsoluteCanvas\n      //id={TILEMAP_CANVAS_ID}\n      //style={{ width: '100%', height: '100%', zIndex: '0' }}\n      //ref={tilesCanvasRef}\n    ///>\n\nexport default WebGLCanvas;\n","import { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTool } from 'redux/actions';\nimport { getTilePositionOnClick } from 'utils/tile';\nimport { EDITOR_CANVAS_ID } from 'ui/constants';\nimport RendererInstance from 'renderer/Renderer';\nimport TilemapInstance from 'tilemap';\nimport * as tools from 'ui/canvas/tools';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nconst EditorCanvas = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const editingCanvasRef = useRef();\n  const { selectedLayer, layers } = useSelector(state => ({ selectedLayer: state.layers.selected, layers: state.layers.layers }));\n  const selectedTile = useSelector(state => state.tileset.selectedTile);\n  const selectedTool = useSelector(state => state.canvas.selectedTool);\n\n  // ====================================\n  // Logic\n  // ====================================\n  useEffect(() => {\n    const refElement = editingCanvasRef.current;\n    if (!refElement) {\n      return;\n    }\n\n    editingCanvasRef.current.width = refElement.clientWidth;\n    editingCanvasRef.current.height = refElement.clientHeight;\n\n    // Used to allow preventing default wheel behavior on chrome\n    const cancelWheel = event => event.preventDefault();\n    refElement.addEventListener('wheel', cancelWheel, {passive: false});\n    return () => {\n        refElement.removeEventListener('wheel', cancelWheel);\n    }\n  }, []);\n\n  useEffect(() => {\n    const panToolStartHandler = ({ key }) => {\n      if (key === ' ') {\n        dispatch(selectTool(tools.PAN_TOOL));\n      }\n    }\n\n    // TODO: Create a stack of tools to be able to get back\n    // to the previous tool instead of the default one\n    const panToolEndHandler = ({ key }) => {\n      if (key === ' ') {\n        dispatch(selectTool(tools.DEFAULT_TOOL));\n      }\n    }\n\n    window.addEventListener('keydown', panToolStartHandler);\n    window.addEventListener('keyup', panToolEndHandler);\n    return () => {\n      window.removeEventListener('keydown', panToolStartHandler);\n      window.removeEventListener('keyup', panToolEndHandler);\n    };\n  }, [dispatch]);\n\n  const handleOneTimeTools = e => {\n    switch (selectedTool) {\n      case tools.FILL_TOOL: {\n        const zoomLevel = RendererInstance.camera.getZoomLevel();\n        const position = getTilePositionOnClick(e, [tileSize[0] * zoomLevel, tileSize[1] * zoomLevel], RendererInstance.camera.position);\n        const layerId = layers[selectedLayer].id;\n\n        TilemapInstance.fill(...position, selectedTile, layerId);\n        break;\n      }\n\n      case tools.PAN_TOOL: {\n        RendererInstance.camera.setOrigin(e.clientX, e.clientY);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  const handleContinuousTools = e => {\n    const zoomLevel = RendererInstance.camera.getZoomLevel();\n    const position = getTilePositionOnClick(e, [tileSize[0] * zoomLevel, tileSize[1] * zoomLevel], RendererInstance.camera.position);\n    const layerId = layers[selectedLayer].id;\n\n    switch (selectedTool) {\n      case tools.DEFAULT_TOOL: {\n        break;\n      }\n\n      case tools.PLACEMENT_TOOL: {\n        if (selectedTile !== null && selectedTile !== undefined && selectedTile !== -1) {\n          TilemapInstance.set(...position, selectedTile, layerId);\n        }\n        break;\n      }\n\n      case tools.PAN_TOOL: {\n        if (e.clientX == 0 || e.clientY == 0) {\n          break;\n        }\n\n        RendererInstance.camera.moveTo(e.clientX, e.clientY);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  const handleMouseDown = e => {\n    handleOneTimeTools(e);\n    handleContinuousTools(e);\n  }\n\n  const handleDrag = e => {\n    handleContinuousTools(e);\n  }\n\n  const handleWheel = e => {\n    if (!e.altKey) {\n      return;\n    }\n\n    RendererInstance.camera.applyZoom(e.deltaY);\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <canvas id={EDITOR_CANVAS_ID}\n            ref={editingCanvasRef}\n            onWheel={handleWheel}\n            onMouseDown={handleMouseDown}\n            onDrag={handleContinuousTools}\n            draggable='true'\n            className='col-span-full row-span-full z-10 w-full h-full'\n    />\n  );\n}\n    //<AbsoluteCanvas\n      //id={EDITOR_CANVAS_ID}\n      //style={{ width: '100%', height: '100%', zIndex: '1' }}\n      //onMouseDown={handleMouseDown}\n      //onDrag={handleContinuousTools}\n      //onWheel={handleWheel}\n      //ref={editingCanvasRef}\n    ///>\n\nexport default EditorCanvas;\n","import Toolbar from 'ui/canvas/Toolbar';\nimport WebGLCanvas from 'ui/canvas/WebGLCanvas';\nimport EditorCanvas from 'ui/canvas/EditorCanvas';\n\nconst Canvas = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className='col-span-3 flex flex-col'>\n      <Toolbar />\n      <section className='grid flex-1 bg-gray-600'>\n        <EditorCanvas />\n        <WebGLCanvas />\n      </section>\n    </div>\n  );\n}\n\nexport default Canvas;\n","import { NavLink } from \"react-router-dom\";\nimport Icon from '@mdi/react';\n\nconst TabButton = ({ iconPath, routerPath }) => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <NavLink to={routerPath} activeClassName='text-indigo-200 bg-indigo-900'>\n      <button className='px-2 py-3 hover:text-indigo-400 hover:bg-indigo-900' data-tip data-for={routerPath}>\n        <Icon path={iconPath} size={1.2} />\n      </button>\n    </NavLink>\n  );\n}\n\nexport default TabButton;\n","import ReactTooltip from \"react-tooltip\";\nimport tooltips from 'ui/tooltips';\nimport TabButton from 'ui/sidebar/TabButton';\nimport * as tabs from 'ui/sidebar/tabs';\nimport { dividerBorderColor } from 'ui/common/styles';\nimport { TOOLTIP_DELAY } from 'ui/constants';\nimport {\n  mdiMap,\n  mdiViewModule,\n  mdiContentSave,\n  mdiUpload,\n  mdiHelpCircleOutline,\n  mdiCog,\n} from '@mdi/js';\n\nconst TabSelector = () => {\n  // ====================================\n  // Render\n  // ====================================\n  const sectionsData = [\n    { path: tabs.TAB_TILES, icon: mdiViewModule },\n    { path: tabs.TAB_MAP, icon: mdiMap },\n    { path: tabs.TAB_IMPORT, icon: mdiUpload },\n    { path: tabs.TAB_EXPORT, icon: mdiContentSave },\n    { path: tabs.TAB_SETTINGS, icon: mdiCog },\n    { path: tabs.TAB_HELP, icon: mdiHelpCircleOutline },\n  ];\n\n  const sections = sectionsData.map(section =>\n    <div key={section.path} className='flex' data-testid={section.path}>\n      <TabButton routerPath={section.path} iconPath={section.icon}/>\n      <ReactTooltip id={section.path} place='right' effect='solid' delayShow={TOOLTIP_DELAY}>\n        {tooltips.get(section.path)}\n      </ReactTooltip>\n    </div>);\n\n  return (\n    <div className={`flex flex-col justify-end bg-black border-r ${dividerBorderColor}`}>\n      {sections}\n    </div>\n  );\n}\n\nexport default TabSelector;\n","import { dividerBorderColor, titleBarHeight } from './styles.js';\n\nconst Tab = ({ children, title }) => {\n  return (\n    <div className='flex-1 flex flex-col text-sm'>\n      <h2 className={`${titleBarHeight} bg-black border-b ${dividerBorderColor} px-2 flex items-center`}>\n        {title}\n      </h2>\n      {children}\n    </div>\n  );\n}\n\nexport default Tab;\n","export const getLayersState = state => state.layers;\n\nexport const getLayersNames = state =>\n  getLayersState(state) ? getLayersState(state).names : [];\n\nexport const getLayerByName = (state, name) =>\n  getLayersState(state) ? { ...getLayersState(state).layers[name], name } : {};\n\nexport const getLayers = state =>\n  getLayersNames(state).map(name => getLayerByName(state, name));\n\nexport const getLayersByAddedTime = state => getLayers(state).reverse();\n\nexport const getVisibleLayers = state => {\n  const layersState = getLayersState(state);\n  return layersState.names.filter(name => layersState.layers[name].visible).reverse();\n}\n","import { useState } from 'react';\nimport { Collapse } from 'react-collapse';\nimport Icon from '@mdi/react';\nimport { mdiMenuDown, mdiMenuRight } from '@mdi/js';\nimport { dividerBorderColor, titleBarHeight } from './styles.js';\n\nconst CollapseSection = ({ title, children }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [open, setOpen] = useState(true);\n  const icon = open ? mdiMenuDown : mdiMenuRight;\n  const sectionClass = open ? `border-b ${dividerBorderColor}` : '';\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className={sectionClass}>\n      <div className={`text-xs flex items-center hover:bg-gray-800 cursor-pointer border-b ${dividerBorderColor} ${titleBarHeight}`}\n           onDoubleClick={e => setOpen(!open)}\n      >\n        <Icon path={icon} size={1} />\n\n        <h1 className='select-none'>\n          {title}\n        </h1>\n      </div>\n\n      <Collapse isOpened={open}>\n        <div className='text-xs text-gray-300 px-2 py-2'>\n          {children}\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default CollapseSection;\n","import { useDispatch } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { selectLayer, toggleLayerVisibility } from 'redux/actions';\nimport { mdiEye, mdiEyeOffOutline } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport * as testIds from 'resources/testIds';\n\nconst LayerItem = ({ layer, index, isSelected }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleLayerClick = () => {\n    dispatch(selectLayer(layer.name));\n  }\n\n  const handleEyeClick = () => {\n    dispatch(toggleLayerVisibility(layer.name));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const icon = layer.visible ? mdiEye : mdiEyeOffOutline;\n  const selectedClassName = isSelected ? 'bg-gray-700' : 'bg-gray-800 hover:bg-gray-900';\n  const visibilityTestId = layer.visible ? testIds.LAYER_VISIBLE : testIds.LAYER_HIDDEN;\n\n  return (\n    <div className='border-t border-gray-700 first:border-t-0'>\n    <Draggable draggableId={layer.name} index={index}>\n      {(provided, snapshop) => {\n        const style = {\n          cursor: 'default',\n          ...provided.draggableProps.style,\n        };\n\n        return (\n          <li className={`flex items-center select-none ${selectedClassName}`}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={style}\n              data-testid={visibilityTestId}\n          >\n            <span className='flex-1 pl-4 py-1' onClick={handleLayerClick}>\n              {layer.name}\n            </span>\n            <span onClick={handleEyeClick} className='cursor-pointer pr-4 py-1' data-testid={testIds.HIDE_LAYER_BUTTON}>\n              <Icon path={icon} size={0.6} />\n            </span>\n          </li>);\n        }\n      }\n    </Draggable>\n    </div>\n  );\n}\n\nexport default LayerItem;\n","import { useDispatch } from 'react-redux';\nimport { addLayer, deleteLayer } from 'redux/actions';\nimport { mdiDelete, mdiPlaylistPlus } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport * as testIds from 'resources/testIds';\n\nconst LayerListFooter = ({ selectedLayer }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleAddClick = () => {\n    dispatch(addLayer());\n  }\n\n  const handleDeleteClick = () => {\n    dispatch(deleteLayer(selectedLayer));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className='flex items-center justify-start mt-1'>\n      <button onClick={handleAddClick} data-testid={testIds.ADD_LAYER_BUTTON}>\n        <Icon path={mdiPlaylistPlus} size={0.7} />\n      </button>\n      <button onClick={handleDeleteClick} data-testid={testIds.DELETE_LAYER_BUTTON}>\n        <Icon path={mdiDelete} size={0.65} />\n      </button>\n    </div>\n  );\n}\n\nexport default LayerListFooter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getLayersByAddedTime } from 'redux/selectors';\nimport CollapseSection from 'ui/common/CollapseTab';\nimport LayerListItem from 'ui/sidebar/tileset/LayerListItem';\nimport LayerListFooter from 'ui/sidebar/tileset/LayerListFooter';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { selectLayer, moveLayer } from 'redux/actions';\n\nconst LayerList = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const { selectedLayer, layers } =\n    useSelector(state => ({ selectedLayer: state.layers.selected, layers: getLayersByAddedTime(state) }));\n\n  const handleLayerBeforeDragStart = e => {\n    dispatch(selectLayer(e.draggableId));\n  }\n\n  const handleLayerDragEnd = e => {\n    dispatch(moveLayer(e.draggableId, layers.length - e.destination.index - 1));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const layerComponents =\n    layers.map((l, i) => <LayerListItem key={l.name}\n                                        index={i}\n                                        layer={l}\n                                        isSelected={l.name === selectedLayer}\n                         />);\n\n  const dndArea = layers && layers.length\n    ? <DragDropContext onDragEnd={handleLayerDragEnd} onBeforeDragStart={handleLayerBeforeDragStart}>\n        <Droppable droppableId='layers'>\n          {(provided) => (\n            <ul {...provided.droppableProps} ref={provided.innerRef} className='border rounded-sm border-gray-700'>\n              {layerComponents}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n    : <div />;\n\n  return (\n    <CollapseSection title='Layers'>\n      {dndArea}\n      <LayerListFooter selectedLayer={selectedLayer} />\n    </CollapseSection>\n  );\n}\n\nexport default LayerList;\n","import { useDispatch } from 'react-redux';\nimport { deleteTileset } from 'redux/actions';\nimport { mdiDelete, mdiCog } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport * as testIds from 'resources/testIds';\n\nconst TilesetFooter = ({ selectedTileset }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleSettingsClick = () => {\n  }\n\n  const handleDeleteClick = () => {\n    dispatch(deleteTileset(selectedTileset));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className='flex items-center justify-start'>\n      <button onClick={handleSettingsClick}>\n        <Icon path={mdiCog} size={0.6} />\n      </button>\n      <button onClick={handleDeleteClick}>\n        <Icon path={mdiDelete} size={0.65} />\n      </button>\n    </div>\n  );\n}\n\nexport default TilesetFooter;\n\n","import { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTextureData, hasTexture } from 'idbTextureStore';\nimport { selectTile } from 'redux/actions';\nimport { getTilePositionOnClick } from 'utils/tile';\nimport TilesetFooter from 'ui/sidebar/tileset/TilesetFooter';\nimport {\n  GRID_COLOR,\n  GRID_CANVAS_ID,\n  TILESET_CANVAS_ID,\n  SELECTED_TILE_COLOR_OVERLAY,\n} from 'ui/constants';\n\nconst tileSize = [32, 32];\n\nconst drawGridLines = (canvas, tileDimensions) => {\n  const context = canvas.getContext('2d');\n  context.strokeStyle = GRID_COLOR;\n  context.lineWidth = 1;\n\n  // Draw horizontal lines\n  for (let j = tileDimensions[0]; j < canvas.height; j += tileDimensions[0]) {\n    context.beginPath();\n    context.moveTo(0, j + 0.5);\n    context.lineTo(canvas.width, j + 0.5);\n    context.stroke();\n  }\n\n  // Draw vertical lines\n  for (let i = tileDimensions[1]; i < canvas.width; i += tileDimensions[1]) {\n    context.beginPath();\n    context.moveTo(i + 0.5, 0);\n    context.lineTo(i + 0.5, canvas.height);\n    context.stroke();\n  }\n}\n\nconst TilesetPreview = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const selectedTileset = useSelector(state => state.tileset.selectedTileset);\n  const [selectedTile, setSelectedTile] = useState([-1, -1]);\n  const [tilesetIndex, setTilesetIndex] = useState(0);\n  const tilegridCanvasRef = useRef(null);\n  const tilesetCanvasRef = useRef(null);\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Load a new tileset to the preview\n  useEffect(() => {\n    if (!selectedTileset || selectedTileset === '' || !tilegridCanvasRef.current || !tilesetCanvasRef.current) {\n      return;\n    }\n\n    const tilesetCanvas = tilesetCanvasRef.current;\n    const tilegridCanvas = tilegridCanvasRef.current;\n\n    // Add image to canvas\n    getTextureData(selectedTileset).then(data => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const image = new Image();\n        image.onload = () => {\n          tilesetCanvas.width = image.width;\n          tilesetCanvas.height = image.height;\n\n          tilegridCanvas.width = image.width;\n          tilegridCanvas.height = image.height;\n\n          const tilesetContext = tilesetCanvas.getContext('2d');\n          tilesetContext.drawImage(image, 0, 0);\n          drawGridLines(tilesetCanvas, tileSize);\n          setTilesetIndex(data.tilesetIndex);\n        }\n        image.src = e.target.result;\n      }\n      reader.readAsDataURL(data.file);\n    });\n  }, [selectedTileset]);\n\n  // Draw highlight on selected tile\n  useEffect(() => {\n    if (!tilegridCanvasRef.current) {\n      return;\n    }\n\n    const canvas = tilegridCanvasRef.current;\n    const context = canvas.getContext('2d');\n    // Draw square on selected tile\n    context.fillStyle = SELECTED_TILE_COLOR_OVERLAY;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillRect(selectedTile[0] * tileSize[0] + 1,\n                     selectedTile[1] * tileSize[1] + 1,\n                     tileSize[0] - 1,\n                     tileSize[1] - 1);\n  }, [selectedTile]);\n\n  const onSelectTile = e => {\n    const tilePos = getTilePositionOnClick(e, tileSize);\n    const tileIndex = tilesetIndex + tilePos[1] * Math.floor(e.target.width / tileSize[0]) + tilePos[0]\n    dispatch(selectTile(tileIndex));\n    setSelectedTile(tilePos);\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const tilesetPreview = selectedTileset === ''\n    ? <div />\n    : (<>\n         <div className='max-h-40 max-w-full overflow-scroll border inline-block rounded-sm mt-2'>\n           <div className='grid'>\n             <canvas id={GRID_CANVAS_ID} onMouseUp={onSelectTile} ref={tilegridCanvasRef} className='col-span-full row-span-full z-10 overflow-hidden' />\n             <canvas id={TILESET_CANVAS_ID} ref={tilesetCanvasRef} className='col-span-full row-span-full z-0 overflow-hidden' />\n           </div>\n         </div>\n         <TilesetFooter selectedTileset={selectedTileset} />\n       </>\n    );\n\n  return tilesetPreview;\n}\n\nexport default TilesetPreview;\n","import { SELECT_TAG } from 'resources/testIds';\n\nconst Select = ({ value, options, onChange }) => {\n  return (\n    <select\n      className='text-gray-400 w-full px-1 py-1 bg-gray-800 hover:bg-gray-700 border border-gray-700 rounded-sm'\n      value={value}\n      onChange={onChange}\n      data-testid={SELECT_TAG}\n    >\n      {options}\n    </select>\n  );\n}\n\nexport default Select;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTileset } from 'redux/actions';\nimport { LOCAL_STORAGE_LAST_SELECTED_TILESET } from 'ui/constants';\nimport Select from 'ui/common/Select';\n\nconst TilesetSelector = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const { selectedTileset, tilesetNames } = useSelector(state => state.tileset);\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Get last tileset used from localStorage\n  useEffect(() => {\n    const lastSelectedTileset = localStorage.getItem(LOCAL_STORAGE_LAST_SELECTED_TILESET);\n\n    // TODO: Check if tileset exists\n    if (lastSelectedTileset && lastSelectedTileset !== '') {\n      dispatch(selectTileset(lastSelectedTileset));\n    }\n    else {\n      localStorage.setItem(LOCAL_STORAGE_LAST_SELECTED_TILESET, '');\n    }\n  }, [dispatch]);\n\n  const onOptionSelected = e => {\n    const name = e.target.value;\n    localStorage.setItem(LOCAL_STORAGE_LAST_SELECTED_TILESET, name);\n    dispatch(selectTileset(name));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const options = [];\n  for (const value of tilesetNames) {\n    options.push(<option value={value} key={value} data-testid={value}>{value}</option>);\n  }\n\n  return (\n    tilesetNames.length > 0 &&\n    <Select value={selectedTileset} options={options} onChange={onOptionSelected} />\n  );\n}\n\nexport default TilesetSelector;\n","const Button = ({ text, onClick }) => {\n  return (\n    <div\n      className='cursor-pointer block bg-indigo-800 px-1 py-2 flex items-center text-center rounded-sm w-full'\n      onClick={onClick}\n    >\n      <p className='flex-1 text-white'>\n        {text}\n      </p>\n    </div>\n  );\n}\n\nexport default Button;\n","import Button from 'ui/common/Button';\n\nconst FileInput = ({ title, onUpload }) => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div>\n      <input\n        type='file'\n        name='tilesetFile'\n        id='tilesetFile'\n        min='1'\n        max='100'\n        value=''\n        onChange={onUpload}\n        style={{ width: '0.1px', height: '0.1px', opacity: 0, overflow: 'hidden', position: 'absolute', zIndex: '-1' }}\n      />\n      <label htmlFor='tilesetFile' className='block '>\n        <Button text='Choose a file...' />\n      </label>\n    </div>\n  );\n};\n\nexport default FileInput;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addTileset, loadExistingTilesets } from 'redux/actions';\nimport { setTextureData, getTextureNames, hasTexture } from 'idbTextureStore';\nimport LayerList from 'ui/sidebar/tileset/LayerList';\nimport TilesetPreview from 'ui/sidebar/tileset/TilesetPreview';\nimport TilesetSelector from 'ui/sidebar/tileset/TilesetSelector';\nimport TileManagerInstance from 'renderer/TileManager';\nimport CollapseSection from 'ui/common/CollapseTab';\nimport FileInput from 'ui/common/FileInput';\nimport {\n  ADD_TILESET_TITLE\n} from 'ui/constants';\n\nconst TilesetManager = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const tilesetNames = useSelector(state => state.tileset.tilesetNames);\n  const hasLoadedTextures = useSelector(state => state.tileset.hasLoadedTextures);\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Load existing tilesets\n  useEffect(() => {\n    getTextureNames().then(textures => {\n      dispatch(loadExistingTilesets(textures));\n    }); // eslint-disable-next-line\n  }, []);\n\n  const onTilesetUpload = async (event) => {\n    // Return if file is invalid\n    if (event.target.files.length <= 0 || !event.target.files[0]) {\n      return;\n    }\n\n    dispatch(addTileset(event.target.files[0].name, event.target.files[0]));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <CollapseSection title='Tileset'>\n      {hasLoadedTextures\n        ? (<>\n            <TilesetSelector />\n            <div className='mt-2'>\n              <FileInput title={ADD_TILESET_TITLE} onUpload={e => onTilesetUpload(e) }/>\n            </div>\n            <TilesetPreview />\n          </>)\n        : <div />\n      }\n    </CollapseSection>\n  );\n}\n\nexport default TilesetManager;\n","import Tab from 'ui/common/Tab';\nimport LayerList from 'ui/sidebar/tileset/LayerList';\nimport TilesetSettings from 'ui/sidebar/tileset/TilesetSettings';\n\nconst Edit = () => {\n  return (\n    <Tab title='Edit'>\n      <LayerList />\n      <TilesetSettings />\n    </Tab>\n  );\n}\n\nexport default Edit;\n","export default function SliderInput(props) {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div>\n      <p><strong>{props.title}</strong></p>\n      <span>{props.value}px</span>\n      <input\n        type='range'\n        min='1'\n        max='100'\n        value={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport Tab from 'ui/common/Tab';\nimport Slider from 'ui/common/SliderInput';\n\nconst MapSettings = (props) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [tileSize, setTileSize] = useState(32);\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Map Settings'>\n      <Slider title=\"Tile size\" onChange={e => setTileSize(e.target.value)} value={tileSize} />\n    </Tab>\n  );\n}\n\nexport default MapSettings;\n","import Tab from 'ui/common/Tab';\n\nconst ImportSettings = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Import'>\n      <h3>Import</h3>\n    </Tab>\n  );\n}\n\nexport default ImportSettings;\n","import * as formats from 'ui/sidebar/export/formats';\nimport Select from 'ui/common/Select';\n\nconst FormatSelector = ({ format, onOptionSelected }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const formatsArray = [\n    formats.FORMAT_JSON,\n    formats.FORMAT_TMX,\n  ];\n\n  // ====================================\n  // Render\n  // ====================================\n  const formatOptions = formatsArray.map(format => <option key={format} value={format}>{format}</option>);\n\n  return (\n    <Select value={format} options={formatOptions} onChange={onOptionSelected} />\n  );\n}\n\nexport default FormatSelector;\n","export const FORMAT_JSON = 'json';\nexport const FORMAT_TMX = 'tmx';\n","import { useState } from 'react';\nimport Tab from 'ui/common/Tab';\nimport * as formats from 'ui/sidebar/export/formats';\nimport TilemapInstance from 'tilemap';\nimport FormatSelector from 'ui/sidebar/export/FormatSelector';\nimport Button from 'ui/common/Button';\n\nconst ExportSettings = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [format, setFormat] = useState(formats.FORMAT_TMX);\n\n  // ====================================\n  // Logic\n  // ====================================\n  const onOptionSelected = e => {\n    setFormat(e.target.value);\n  }\n\n  const handleExport = async () => {\n    const rawData = TilemapInstance.dump(format);\n    const filename = 'tilemap.' + format;\n    const blob = new Blob([rawData], {type : 'application/xml'});\n    const a = document.createElement('a');\n\n    a.href = URL.createObjectURL(blob);\n    a.download =  filename;\n    a.click();\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Export Map'>\n      <FormatSelector format={format} onOptionSelected={onOptionSelected} />\n      <Button text='Export' onClick={handleExport} />\n    </Tab>\n  );\n}\n      //<button className='bg-indigo-900 my-3 py-2 px-4 flex justify-center rounded cursor-pointer'\n              //onClick={handleExport}\n      //>\n        //Export\n      //</button>\n\nexport default ExportSettings;\n","import Tab from 'ui/common/Tab';\n\nconst ProjectSettings = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Project Settings'>\n      <label htmlFor='show-grid'>Show grid</label>\n      <input type='checkbox' name='show-grid' />\n    </Tab>\n  );\n}\n\nexport default ProjectSettings;\n","import Tab from 'ui/common/Tab';\n\nconst Help = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Help'>\n    </Tab>\n  );\n}\n\nexport default Help;\n\n","import TabSelector from 'ui/sidebar/TabSelector';\nimport Edit from 'ui/sidebar/tileset/Edit';\nimport MapSettings from 'ui/sidebar/map/MapSettings';\nimport ImportSettings from 'ui/sidebar/import/ImportSettings';\nimport ExportSettings from 'ui/sidebar/export/ExportSettings';\nimport ProjectSettings from 'ui/sidebar/project/ProjectSettings';\nimport Help from 'ui/sidebar/Help';\nimport { Switch, Route } from \"react-router-dom\";\nimport { dividerBorderColor } from 'ui/common/styles';\nimport * as tabs from './tabs';\n\nconst Sidebar = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <aside className={`flex flex-row bg-gray-900 border-r border-b ${dividerBorderColor}`}>\n      <TabSelector />\n        <Switch>\n          <Route path={`/${tabs.TAB_TILES}`}>\n            <Edit />\n          </Route>\n\n          <Route path={`/${tabs.TAB_MAP}`}>\n            <MapSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_IMPORT}`}>\n            <ImportSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_EXPORT}`}>\n            <ExportSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_SETTINGS}`}>\n            <ProjectSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_HELP}`}>\n            <Help />\n          </Route>\n        </Switch>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import Canvas from 'ui/canvas/Canvas';\nimport Sidebar from 'ui/sidebar/Sidebar';\nimport { HashRouter } from \"react-router-dom\";\nimport { dividerBorderColor } from 'ui/common/styles';\n\nconst App = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className={`h-screen w-screen flex flex-col text-gray-50 bg-gray-900 border-l border-t ${dividerBorderColor} text-gray-100`}>\n      <main className='flex-1 grid grid-cols-4'>\n        <HashRouter>\n          <Sidebar />\n        </HashRouter>\n        <Canvas />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from 'ui/App';\nimport store from 'redux/store';\n\nimport 'index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}