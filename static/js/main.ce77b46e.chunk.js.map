{"version":3,"sources":["redux/actionTypes.js","redux/actions.js","ui/canvas/tools.js","ui/sidebar/tabs.js","ui/tooltips.js","ui/constants.js","ui/canvas/Tool.js","resources/testIds.js","ui/common/styles.js","ui/canvas/Toolbar.js","redux/reducers/tileset.js","redux/reducers/canvas.js","redux/reducers/layers.js","redux/reducers/index.js","tilemap/index.js","redux/store.js","renderer/Shader.js","idb.js","utils/file.js","utils/tile.js","renderer/Texture.js","renderer/TextureManager.js","renderer/TileManager.js","renderer/constants.js","renderer/Batch2D.js","renderer/Camera.js","renderer/Renderer.js","ui/common/AbsoluteCanvas.js","ui/canvas/WebGLCanvas.js","ui/canvas/EditorCanvas.js","ui/canvas/Canvas.js","ui/sidebar/TabButton.js","ui/sidebar/TabSelector.js","ui/common/Tab.js","redux/selectors.js","ui/common/CollapseTab.js","ui/sidebar/tileset/LayerListItem.js","ui/sidebar/tileset/LayerListFooter.js","ui/sidebar/tileset/LayerList.js","ui/sidebar/tileset/TilesetPreview.js","ui/sidebar/tileset/TilesetSelector.js","ui/common/FileInput.js","ui/sidebar/tileset/TilesetSettings.js","ui/sidebar/tileset/Edit.js","ui/common/SliderInput.js","ui/sidebar/map/MapSettings.js","ui/sidebar/import/ImportSettings.js","ui/sidebar/export/FormatSelector.js","ui/sidebar/export/formats.js","ui/sidebar/export/ExportSettings.js","ui/sidebar/project/ProjectSettings.js","ui/sidebar/Help.js","ui/sidebar/Sidebar.js","ui/App.js","index.js"],"names":["ADD_TILESET","ADD_TILESETS","SELECT_TILESET","SELECT_TILE","SELECT_TOOL","ADD_LAYER","DELETE_LAYER","SELECT_LAYER","MOVE_LAYER","TOGGLE_LAYER_VISIBILITY","addTileset","name","type","payload","selectTileset","selectTool","tool","addLayer","x","y","width","height","selectLayer","DEFAULT_TOOL","PLACEMENT_TOOL","FILL_TOOL","MOVE_TOOL","PAN_TOOL","TAB_TILES","TAB_MAP","TAB_IMPORT","TAB_EXPORT","TAB_SETTINGS","TAB_HELP","tooltips","Map","set","tools","tabs","LOCAL_STORAGE_LAST_SELECTED_TILESET","Tool","iconPath","dispatch","useDispatch","selectedTool","useSelector","state","canvas","iconClasses","className","role","data-testid","onClick","data-tip","data-for","path","size","id","place","effect","delayShow","get","dividerBorderColor","titleBarHeight","Toolbar","mdiCursorDefaultOutline","mdiPencil","mdiPail","mdiCursorMove","initialState","tilesetNames","selectedTileset","selectedTile","selected","names","layers","lastIdx","combineReducers","tileset","action","value","visible","newLayers","newIds","filter","newSelected","length","idx","Math","max","indexOf","to","from","reorderedNames","splice","TilemapInstance","init","a","wasm","memory","map","Tilemap","new","hasInitialized","console","error","message","add_layer","layerId","fill","targetValue","dump","format","log","this","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","rootReducer","applyMiddleware","next","createShader","gl","source","shader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","info","getShaderInfoLog","ShaderProgram","vertexSource","fragmentSource","vertexShader","VERTEX_SHADER","fragmentShader","FRAGMENT_SHADER","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","use","useProgram","setMat4","uniformName","uniformMatrix4fv","getUniformLocation","setInt","uniform1i","textureStore","Store","getTextureNames","keys","textureNames","getTextureData","setTextureData","data","getImageBitmap","fileData","file","createImageBitmap","getTilePositionOnClick","e","tileSize","offset","bounds","target","getBoundingClientRect","floor","clientX","left","clientY","top","getTileUV","frame","frameSize","textureSize","frameWidth","frameHeight","hFrames","vFrames","maxFrames","frameX","frameY","topLeftX","topLeftY","Texture","create","createTexture","bindTexture","TEXTURE_2D","pixel","Uint8Array","texImage2D","RGBA","UNSIGNED_BYTE","then","bitmap","texParameteri","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","bind","getUV","TextureManager","add","indexMap","has","delete","TileManagerInstance","addTilesFromTileset","texture","i","j","uv","tiles","tile","debug","UNIFORM_MVP","UNIFORM_SAMPLERS","ATTRIB_POSITION","ATTRIB_TEXTURE_COORD","ATTRIB_TEXTURE_IDX","ATTRIB_COLOR","BATCH_VERTEX_SHADER_SOURCE","BATCH_FRAGMENT_SHADER_SOURCE","Batch2D","shaderProgram","vertices","Float32Array","maxSprites","indices","indicesSize","Uint16Array","createIndices","VAO","createVertexArray","VBO","createBuffer","EBO","bindVertexArray","bindBuffer","ARRAY_BUFFER","bufferData","DYNAMIC_DRAW","locPosition","getAttribLocation","vertexAttribPointer","FLOAT","enableVertexAttribArray","locTextureCoord","locTextureIdx","locColor","ELEMENT_ARRAY_BUFFER","STATIC_DRAW","vertexIndex","indexCount","begin","emplace","tileValue","position","color","tileData","r","g","b","textureIdx","textureManager","getIndex","flush","bufferSubData","subarray","render","forEach","activeTexture","TEXTURE0","drawElements","TRIANGLES","UNSIGNED_SHORT","textures","zoomLevels","Camera","setOrigin","origin","clientOrigin","moveTo","cameraZ","calculateMvp","setZoom","zoom","clampZoom","applyZoom","abs","zoomLevel","min","perceivedWidth","perceivedHeight","getMvp","mvp","getZoomLevel","computedPositionX","computedPositionY","mat4","ortho","projection","near","far","multiply","modelView","translate","RendererInstance","camera","batch","setClearColor","clearColor","clear","COLOR_BUFFER_BIT","renderGrid","requestAnimationFrame","canvasWidth","canvasHeight","layersState","getState","layerName","layer","AbsoluteCanvas","forwardRef","ref","style","onMouseDown","onMouseMove","onMouseUp","onWheel","onDragStart","onDrag","draggable","WebGLCanvas","tilesCanvasRef","useRef","useEffect","current","clientWidth","clientHeight","getContext","zIndex","EditorCanvas","editingCanvasRef","selectedLayer","refElement","cancelWheel","event","preventDefault","addEventListener","passive","removeEventListener","panToolStartHandler","key","panToolEndHandler","handleContinuousTools","handleOneTimeTools","altKey","deltaY","Canvas","TabButton","routerPath","activeClassName","TabSelector","sections","icon","mdiViewModule","mdiMap","mdiUpload","mdiContentSave","mdiCog","mdiHelpCircleOutline","section","Tab","children","title","getLayersState","getLayers","getLayersNames","getLayerByName","getLayersByAddedTime","reverse","CollapseSection","useState","open","setOpen","mdiMenuDown","mdiMenuRight","sectionClass","onDoubleClick","isOpened","LayerItem","index","isSelected","handleLayerClick","handleEyeClick","mdiEye","mdiEyeOffOutline","selectedClassName","visibilityTestId","draggableId","provided","snapshop","cursor","draggableProps","innerRef","dragHandleProps","LayerListFooter","mdiPlaylistPlus","mdiDelete","LayerList","layerComponents","l","LayerListItem","dndArea","onDragEnd","destination","onBeforeDragStart","droppableId","droppableProps","placeholder","TilesetPreview","setSelectedTile","tilesetIndex","setTilesetIndex","tilegridCanvasRef","tilesetCanvasRef","tilesetCanvas","tilegridCanvas","reader","FileReader","onload","image","Image","drawImage","tileDimensions","context","strokeStyle","lineWidth","beginPath","lineTo","stroke","drawGridLines","src","result","readAsDataURL","fillStyle","clearRect","fillRect","tilePos","tileIndex","TilesetSelector","lastSelectedTileset","localStorage","getItem","options","push","onChange","setItem","FileInput","onUpload","TilesetManager","onTilesetUpload","files","fileBlob","Edit","TilesetSettings","SliderInput","props","MapSettings","setTileSize","ImportSettings","FormatSelector","onOptionSelected","formatOptions","ExportSettings","setFormat","handleExport","rawData","filename","blob","Blob","document","createElement","href","URL","createObjectURL","download","click","ProjectSettings","htmlFor","Help","overflow","Sidebar","App","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ce77b46e.chunk.js","sourcesContent":["export const ADD_TILESET = '[TILESET] Add one';\nexport const ADD_TILESETS = '[TILESET] Add multiple';\nexport const SELECT_TILESET = '[TILESET] Select';\nexport const SELECT_TILE = '[TILE] Select';\n\nexport const SELECT_TOOL = '[TOOL] Select';\n\nexport const ADD_LAYER = '[LAYER] Add one';\nexport const DELETE_LAYER = '[LAYER] Delete';\nexport const SELECT_LAYER = '[LAYER] Select';\nexport const MOVE_LAYER = '[LAYER] Move';\nexport const TOGGLE_LAYER_VISIBILITY = '[LAYER] Toggle Visibility';\n\n","import {\n  ADD_TILESET,\n  ADD_TILESETS,\n  SELECT_TILESET,\n  SELECT_TILE,\n  SELECT_TOOL,\n  ADD_LAYER,\n  DELETE_LAYER,\n  SELECT_LAYER,\n  MOVE_LAYER,\n  TOGGLE_LAYER_VISIBILITY,\n} from 'redux/actionTypes';\n\nexport const addTileset = name => ({\n  type: ADD_TILESET,\n  payload: { name },\n});\n\nexport const addTilesets = names => ({\n  type: ADD_TILESETS,\n  payload: { names },\n});\n\nexport const selectTileset = name => ({\n  type: SELECT_TILESET,\n  payload: { name },\n});\n\nexport const selectTile = value => ({\n  type: SELECT_TILE,\n  payload: { value },\n});\n\nexport const selectTool = tool => ({\n  type: SELECT_TOOL,\n  payload: { tool },\n});\n\nexport const addLayer = (name, x, y, width, height) => ({\n  type: ADD_LAYER,\n  payload: { name, x, y, width, height },\n});\n\nexport const deleteLayer = name => ({\n  type: DELETE_LAYER,\n  payload: { name },\n});\n\nexport const selectLayer = name => ({\n  type: SELECT_LAYER,\n  payload: { name },\n});\n\nexport const moveLayer = (name, to) => ({\n  type: MOVE_LAYER,\n  payload: { name, to },\n});\n\nexport const toggleLayerVisibility = name => ({\n  type: TOGGLE_LAYER_VISIBILITY,\n  payload: { name },\n});\n","export const DEFAULT_TOOL = 'DEFAULT_TOOL';\nexport const PLACEMENT_TOOL = 'PLACEMENT_TOOL';\nexport const FILL_TOOL = 'FILL_TOOL';\nexport const MOVE_TOOL = 'MOVE_TOOL';\nexport const PAN_TOOL = 'PAN_TOOL';\n\n","export const TAB_TILES = 'tiles';\nexport const TAB_MAP = 'map';\nexport const TAB_IMPORT = 'import';\nexport const TAB_EXPORT = 'save';\nexport const TAB_SETTINGS = 'settings';\nexport const TAB_HELP = 'help';\n","import * as tools from 'ui/canvas/tools';\nimport * as tabs from 'ui/sidebar/tabs';\n\nconst tooltips = new Map();\n\ntooltips.set(tools.DEFAULT_TOOL, 'default tool');\ntooltips.set(tools.PLACEMENT_TOOL, 'placement tool');\ntooltips.set(tools.FILL_TOOL, 'fill tool');\ntooltips.set(tools.MOVE_TOOL, 'move tool');\n\ntooltips.set(tabs.TAB_TILES, 'tab tiles');\ntooltips.set(tabs.TAB_MAP, 'tab map');\ntooltips.set(tabs.TAB_IMPORT, 'tab import');\ntooltips.set(tabs.TAB_EXPORT, 'tab export');\ntooltips.set(tabs.TAB_SETTINGS, 'settings tab');\ntooltips.set(tabs.TAB_HELP, 'help tab');\n\nexport default tooltips;\n","export const TILEMAP_CANVAS_ID = 'tilemap-canvas';\nexport const EDITOR_CANVAS_ID = 'editor-canvas';\nexport const GRID_CANVAS_ID = 'grid-canvas';\nexport const TILESET_CANVAS_ID = 'tileset-canvas';\nexport const LOCAL_STORAGE_LAST_SELECTED_TILESET = 'lastSelectedTileset';\n\nexport const ADD_TILESET_TITLE = 'Add Tileset';\n\nexport const GRID_COLOR = '#dddddd';\nexport const SELECTED_TILE_COLOR_OVERLAY = 'rgba(79, 70, 229, 0.4)';\n\nexport const TOOLTIP_DELAY = 600;\n","import { connect, useDispatch, useSelector } from 'react-redux';\nimport { selectTool } from 'redux/actions';\nimport ReactTooltip from 'react-tooltip';\nimport Icon from '@mdi/react';\nimport tooltips from 'ui/tooltips';\nimport * as testIds from 'resources/testIds';\nimport {\n  TOOLTIP_DELAY,\n} from 'ui/constants';\n\nconst iconSize = 0.75;\n\nconst Tool = ({ iconPath, tool }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(state => state.canvas.selectedTool);\n\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleOnClick = () => {\n    dispatch(selectTool(tool));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const iconClasses = tool === selectedTool\n    ? 'text-indigo-400 hover:text-indigo-500'\n    : 'hover:text-indigo-500 cursor-pointer';\n  return (\n    <button className='px-4 py-2 cursor-default' role='button' data-testid={tool === selectedTool ? testIds.SELECTED_TOOL : ''}>\n      <div className={iconClasses} onClick={handleOnClick} data-tip data-for={tool} data-testid={tool}>\n        <Icon path={iconPath} size={iconSize} />\n      </div>\n      <ReactTooltip id={tool} place='bottom' effect='solid' delayShow={TOOLTIP_DELAY}>\n        {tooltips.get(tool)}\n      </ReactTooltip>\n    </button>\n  );\n}\n\nexport default Tool;\n\n","export const SELECTED_TOOL = 'selected-tool';\nexport const SELECT_TILESET = 'select-tileset';\nexport const ADD_LAYER_BUTTON = 'add-layer-button';\nexport const DELETE_LAYER_BUTTON = 'delete-layer-button';\nexport const HIDE_LAYER_BUTTON = 'hide-layer-button';\nexport const LAYER_VISIBLE = 'layer-visible';\nexport const LAYER_HIDDEN = 'layer-hidden';\n","export const dividerBorderColor = 'border-gray-600';\nexport const titleBarHeight = 'h-9';\nexport const toolbarHeight = titleBarHeight;\n","import React from 'react';\nimport Tool from 'ui/canvas/Tool';\nimport { dividerBorderColor, toolbarHeight } from 'ui/common/styles';\nimport {\n  mdiPencil,\n  mdiPail,\n  mdiSelect,\n  mdiCursorDefaultOutline,\n  mdiCursorMove,\n} from '@mdi/js';\n\nimport * as tools from 'ui/canvas/tools';\n\nconst Toolbar = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <nav className={`flex flex-row items-stretch bg-black border-b ${dividerBorderColor} ${toolbarHeight}`}>\n      <div className='flex flex-row justify-start items-center flex-grow'>\n        <Tool iconPath={mdiCursorDefaultOutline} tool={tools.DEFAULT_TOOL} />\n        <Tool iconPath={mdiPencil} tool={tools.PLACEMENT_TOOL} />\n        <Tool iconPath={mdiPail} tool={tools.FILL_TOOL} />\n        <Tool iconPath={mdiCursorMove} tool={tools.MOVE_TOOL} />\n      </div>\n    </nav>\n  );\n}\n\nexport default Toolbar;\n","import {\n  ADD_TILESET,\n  ADD_TILESETS,\n  SELECT_TILESET,\n  SELECT_TILE,\n} from 'redux/actionTypes'\n\nconst initialState = {\n  tilesetNames: [],\n  selectedTileset: '',\n  selectedTile: -1,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case ADD_TILESETS: {\n      const { names } = action.payload;\n\n      return {\n        ...state,\n        tilesetNames: [...state.tilesetNames, ...names],\n      };\n    }\n\n    case ADD_TILESET: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        tilesetNames: [...state.tilesetNames, name],\n        selectedTileset: name,\n      };\n    }\n\n    case SELECT_TILESET: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        selectedTileset: name,\n      };\n    }\n\n    case SELECT_TILE: {\n      const { value } = action.payload;\n      return {\n        ...state,\n        selectedTile: value,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  SELECT_TOOL,\n} from 'redux/actionTypes';\n\nimport {\n  DEFAULT_TOOL\n} from 'ui/canvas/tools';\n\nconst initialState = {\n  selectedTool: DEFAULT_TOOL,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case SELECT_TOOL: {\n      const { tool } = action.payload;\n      return {\n        ...state,\n        selectedTool: tool,\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n","import {\n  ADD_LAYER,\n  DELETE_LAYER,\n  SELECT_LAYER,\n  MOVE_LAYER,\n  TOGGLE_LAYER_VISIBILITY,\n} from 'redux/actionTypes';\n\nconst initialState = {\n  selected: '',\n  names: [],\n  layers: {},\n  lastIdx: 0,\n}\n\nexport default function(state = initialState, action) {\n  switch(action.type) {\n    case ADD_LAYER: {\n      let { name } = action.payload;\n\n      // If name is not provided, add a default one\n      if (!name) {\n        name = `Layer ${state.lastIdx + 1}`;\n      }\n\n      return {\n        ...state,\n        names: [...state.names, name],\n        layers: {\n          ...state.layers,\n          [name]: {\n            id: state.lastIdx,\n            visible: true,\n          }\n        },\n        selected: name,\n        lastIdx: state.lastIdx + 1,\n      };\n    }\n\n    case DELETE_LAYER: {\n      const { name } = action.payload;\n      const { [name]: value, ...newLayers } = state.layers;\n      const newIds = state.names.filter(id => id !== name);\n\n      let newSelected = state.selected;\n\n      // If the selected layer is the layer we are deleting and\n      // it is not the last layer, select a new index.\n      if (newSelected === name && newIds.length > 0) {\n        const idx = Math.max(state.names.indexOf(name) - 1, 0);\n        newSelected = newIds[idx];\n      }\n      else if (newIds.length === 0) {\n        newSelected = '';\n      }\n\n      return {\n        ...state,\n        names: newIds,\n        layers: newLayers,\n        selected: newSelected,\n      };\n    }\n\n    case SELECT_LAYER: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        selected: name,\n      };\n    }\n\n    case MOVE_LAYER: {\n      const { name, to } = action.payload;\n      const from = state.names.indexOf(name);\n      const reorderedNames = state.names;\n\n      // If the layer exists\n      if (from !== -1) {\n        reorderedNames.splice(from, 1);\n        reorderedNames.splice(to, 0, name);\n      }\n\n      return {\n        ...state,\n        names: reorderedNames,\n      };\n    }\n\n    case TOGGLE_LAYER_VISIBILITY: {\n      const { name } = action.payload;\n      return {\n        ...state,\n        layers: {\n          ...state.layers,\n          [name]: {\n            ...state.layers[name],\n            visible: !state.layers[name].visible,\n          }\n        }\n      }\n    }\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport tileset from 'redux/reducers/tileset';\nimport canvas from 'redux/reducers/canvas';\nimport layers from 'redux/reducers/layers';\n\nexport default combineReducers({ tileset, canvas, layers });\n","import {\n  ADD_LAYER,\n  DELETE_LAYER,\n} from 'redux/actionTypes';\n\nclass Tilemap {\n  constructor() {\n    console.log('DEBUG: CONSTRUCTING GRID');\n    this.hasInitialized = false;\n  }\n\n  init = async (width, height) => {\n    try {\n      this.wasm = await import('./pkg');\n      const { memory } = await import('./pkg/tilemap_bg');\n      this.map = this.wasm.Tilemap.new();\n      this.memory = memory;\n      this.hasInitialized = true;\n    } catch (err) {\n      console.error(`[x] Error loading grid: ${err.message}`);\n    }\n  }\n\n  width = () => {\n    return this.map.width();\n  }\n\n  height = () => {\n    return this.map.height();\n  }\n\n  addLayer = (x, y, width, height) => {\n    // Set default position to (0,0)\n    if (!x || !y) {\n      x = 0;\n      y = 0;\n    }\n\n    // Set default size to the map size\n    if (!width || !height) {\n      width = TilemapInstance.width();\n      height = TilemapInstance.height();\n    }\n\n    this.map.add_layer(x, y, width, height);\n  }\n\n  get = (x, y, layerId) => {\n    return this.map.get(x, y, layerId);\n  }\n\n  set = (x, y, value, layerId) => {\n    this.map.set(x, y, value, layerId);\n  }\n\n  fill = (x, y, targetValue, layerId) => {\n    this.map.fill(x, y, targetValue, layerId);\n  }\n\n  dump = (format) => {\n    // TODO: Implement dump for whole map\n    //return this.grid.dump(format);\n  }\n}\n\nconst tilemapReduxMiddleware = store => next => action => {\n  switch(action.type) {\n    case ADD_LAYER: {\n      let { x, y, width, height } = action.payload || {};\n      TilemapInstance.addLayer(x, y, width, height);\n      break;\n    }\n\n    case DELETE_LAYER: {\n      // TODO: Implement layer deletion\n      break;\n    }\n\n    default:\n      break;\n  }\n\n  return next(action);\n}\n\nconst TilemapInstance = new Tilemap();\n\nexport { tilemapReduxMiddleware };\nexport default TilemapInstance;\n","import { compose, createStore, applyMiddleware } from 'redux';\nimport rootReducer from 'redux/reducers';\nimport { tilemapReduxMiddleware } from 'tilemap';\n\n// Remove Redux Devtools in production\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancer(applyMiddleware(tilemapReduxMiddleware)));\nexport default store;\n","function createShader(gl, source, type) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  if ( !gl.getShaderParameter(shader, gl.COMPILE_STATUS) ) {\n    const info = gl.getShaderInfoLog(shader);\n    console.error('Could not compile shader: ' + info);\n  }\n\n  return shader;\n}\n\nclass ShaderProgram {\n  constructor(gl, vertexSource, fragmentSource) {\n    this.gl = gl;\n    this.vertexSource = vertexSource;\n    this.fragmentSource = fragmentSource;\n    this.init();\n  }\n\n  init = () => {\n    const vertexShader = createShader(this.gl, this.vertexSource, this.gl.VERTEX_SHADER);\n    const fragmentShader = createShader(this.gl, this.fragmentSource, this.gl.FRAGMENT_SHADER);\n\n    this.id = this.gl.createProgram();\n    this.gl.attachShader(this.id, vertexShader);\n    this.gl.attachShader(this.id, fragmentShader);\n    this.gl.linkProgram(this.id);\n\n    if (!this.gl.getProgramParameter(this.id, this.gl.LINK_STATUS)) {\n      console.error('Unable to initialize the shader program: ' + this.gl.getProgramInfoLog(this.id));\n      return null;\n    }\n  }\n\n  use = () => {\n    this.gl.useProgram(this.id);\n  }\n\n  setMat4 = (uniformName, value) => {\n    this.gl.uniformMatrix4fv(this.gl.getUniformLocation(this.id, uniformName), false, value);\n  }\n\n  setInt = (uniformName, value) => {\n    this.gl.uniform1i(this.gl.getUniformLocation(this.id, uniformName), value);\n  }\n}\n\nexport default ShaderProgram;\n","import { set, get, keys, Store } from 'idb-keyval';\n\nconst textureStore = new Store('textures-store', 'textures');\n\n// Gets all texture names available\nexport const getTextureNames = async () => {\n  try {\n    const textureNames = await keys(textureStore);\n    return textureNames;\n  } catch (err) {\n    console.error(err);\n    return [];\n  }\n};\n\nexport const getTextureData = async (name) => {\n  return await get(name, textureStore);\n};\n\nexport const setTextureData = async (name, data) => {\n  await set(name, data, textureStore);\n};\n\nexport const hasTexture = async (name) => {\n  const textureKeys = await keys(textureStore);\n  return textureKeys.includes(name);\n}\n","import { getTextureData } from 'idb';\n\nexport const fileToBase64 = file => {\n  if (!file) {\n    return null;\n  }\n\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n    reader.readAsDataURL(file);\n  });\n}\n\nexport const getImageBitmap = async name => {\n  try {\n    const fileData = await getTextureData(name);\n    if (!fileData.file) {\n      return null;\n    }\n\n    return createImageBitmap(fileData.file);\n  } catch (err) {\n    console.error(err);\n    return null;\n  }\n}\n\n//export const getFileName = (fullpath) => {\n  //return fullpath.split('\\\\').pop().split('/').pop();\n//}\n\n\n//const base64ToFile = (data) => {\n  //const raw = window.atob(data);\n  //const rawLength = raw.length;\n  //const bytes = new Uint8Array(rawLength);\n\n  //for (let i = 0; i < rawLength; i++) {\n    //bytes[i] = raw.charCodeAt(i);\n  //}\n\n  //return bytes;\n//}\n\n","export const getTilePositionOnClick = (e, tileSize, offset) => {\n  offset = offset || [0.0, 0.0];\n  const bounds = e.target.getBoundingClientRect();\n  const w = Math.floor(e.target.width / tileSize[0]);\n  const x = Math.floor((e.clientX + offset[0] - bounds.left) / tileSize[0]);\n  const y = Math.floor((e.clientY + offset[1] - bounds.top) / tileSize[1]);\n  return [x, y];\n}\n\nexport const getTileUV = (frame, frameSize, textureSize) => {\n  // TODO: Better handling of out of bounds frame sizes\n  if (frameSize[0] >= textureSize[0] || frameSize[1] >= textureSize[1]) {\n    return [\n      [0.0, 0.0],\n      [0.0, 0.0],\n      [0.0, 0.0],\n      [0.0, 0.0],\n    ];\n  }\n\n  const frameWidth  = (frameSize[0] * 1.0) / textureSize[0];\n  const frameHeight = (frameSize[1] * 1.0) / textureSize[1];\n  const hFrames = Math.floor(textureSize[0] / frameSize[0]);\n  const vFrames = Math.floor(textureSize[1] / frameSize[1]);\n  const maxFrames = hFrames * vFrames;\n\n  const frameX = Math.floor(frame % hFrames);\n  const frameY = Math.floor((frame % maxFrames) / hFrames);\n  // Multiply the x coord of the frame in the texture atlas by the normalized value of the width one frame.\n  const topLeftX = frameX * (textureSize[0] / hFrames) * 1.0 / textureSize[0];\n  // Multiply the y coord of the frame in the tile map by the normalized value of the height one frame.\n  // Invert the value as the y axis is upwards for OpenGL\n  const topLeftY = frameY * (textureSize[1] / vFrames) / textureSize[1];\n\n  return [\n    [topLeftX, topLeftY], // top-left\n    [topLeftX + frameWidth, topLeftY], // top-right\n    [topLeftX + frameWidth, topLeftY + frameHeight], // bottom-right\n    [topLeftX, topLeftY + frameHeight], // bottom-left\n  ];\n}\n","import { getImageBitmap } from 'utils/file';\nimport { getTileUV } from 'utils/tile';\n\nclass Texture {\n  constructor(gl, name) {\n    this.name = name;\n    this.create(gl);\n  }\n\n  create = gl => {\n    this.id = gl.createTexture();\n\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\n\n    this.width = 1;\n    this.height = 1;\n    const pixel = new Uint8Array([0, 0, 0, 0]);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixel);\n\n    getImageBitmap(this.name).then(bitmap => {\n      if (!bitmap) {\n        return;\n      }\n\n      this.width = bitmap.width;\n      this.height = bitmap.height;\n\n      gl.bindTexture(gl.TEXTURE_2D, this.id);\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, bitmap);\n\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n      gl.texParameteri (gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    });\n  }\n\n  bind = (gl) => {\n    gl.bindTexture(gl.TEXTURE_2D, this.id);\n  }\n\n  getUV = (frame, frameSize) => {\n    return getTileUV(frame, frameSize, [this.width, this.height]);\n    //// If the texture has not been initialized yet\n    //if (this.width == 1 && this.height == 1) {\n      //return [\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n        //[0.0, 0.0],\n      //];\n    //}\n\n    //const frameWidth  = (frameSize[0] * 1.0) / this.width;\n    //const frameHeight = (frameSize[1] * 1.0) / this.height;\n    //const hFrames = Math.floor(this.width / frameSize[0]);\n    //const vFrames = Math.floor(this.height / frameSize[1]);\n    //const maxFrames = hFrames * vFrames;\n\n    //const frameX = Math.floor(frame % hFrames);\n    //const frameY = Math.floor((frame % maxFrames) / hFrames);\n    //// Multiply the x coord of the frame in the texture atlas by the normalized value of the width one frame.\n    //const topLeftX = frameX * (this.width / hFrames) * 1.0 / this.width;\n    //// Multiply the y coord of the frame in the tile map by the normalized value of the height one frame.\n    //// Invert the value as the y axis is upwards for OpenGL\n    //const topLeftY = frameY * (this.height / vFrames) / this.height;\n\n    //return [\n      //[topLeftX, topLeftY],\n      //[topLeftX + frameWidth, topLeftY],\n      //[topLeftX + frameWidth, topLeftY + frameHeight],\n      //[topLeftX, topLeftY + frameHeight],\n    //];\n  }\n}\n\nexport default Texture;\n\n","import Texture from 'renderer/Texture';\n\nclass TextureManager {\n  constructor() {\n    this.map = new Map();\n    this.indexMap = new Map();\n  }\n\n  add = (gl, name) => {\n    this.indexMap.set(name, this.map.size);\n    this.map.set(name, new Texture(gl, name));\n  }\n\n  get(name) {\n    return this.map.get(name);\n  }\n\n  getIndex(name) {\n    return this.indexMap.get(name);\n  }\n\n  has(name) {\n    return this.map.has(name);\n  }\n\n  remove(name) {\n    this.map.delete(name);\n  }\n}\n\nexport default TextureManager;\n","import { getImageBitmap } from 'utils/file';\nimport { getTileUV } from 'utils/tile';\n\nclass TileManager {\n  constructor() {\n    this.tiles = new Map();\n    this.length = 0;\n  }\n\n  addTilesFromTileset = async (texture, tileSize) => {\n    const bitmap = await getImageBitmap(texture);\n    const hFrames = Math.floor(bitmap.width / tileSize[0]);\n    const vFrames = Math.floor(bitmap.height / tileSize[1]);\n\n    for (let i = 0; i < vFrames; i++) {\n      for (let j = 0; j < hFrames; j++) {\n        const idx = i * hFrames + j;\n        const uv = getTileUV(idx, tileSize, [bitmap.width, bitmap.height])\n        this.tiles.set(this.length, {\n          size: tileSize,\n          texture: texture,\n          uv: uv,\n        });\n        ++this.length;\n      }\n    }\n  }\n\n  get = (tile) => {\n    if (!this.debug) {\n      this.debug = true;\n    }\n    return this.tiles.get(tile);\n  }\n\n};\n\nconst TileManagerInstance = new TileManager();\n\nexport default TileManagerInstance;\n","export const UNIFORM_PROJECTION = 'uProjectionMatrix';\nexport const UNIFORM_MVP = 'uMVP';\nexport const UNIFORM_SAMPLERS = 'uSamplers';\n\nexport const ATTRIB_POSITION = 'aPosition';\nexport const ATTRIB_TEXTURE_COORD = 'aTextureCoord';\nexport const ATTRIB_TEXTURE_IDX = 'aTextureIdx';\nexport const ATTRIB_COLOR = 'aColor';\n\nexport const BATCH_VERTEX_SHADER_SOURCE = `#version 300 es\n\n      in vec2 ${ATTRIB_POSITION};\n      in float ${ATTRIB_TEXTURE_IDX};\n      in vec2 ${ATTRIB_TEXTURE_COORD};\n      in vec4 ${ATTRIB_COLOR};\n\n      out vec2 vTextureCoord;\n      out float vTextureIdx;\n      out vec4 vColor;\n\n      uniform mat4 ${UNIFORM_MVP};\n\n      void main() {\n        gl_Position = ${UNIFORM_MVP} * vec4(aPosition, 0.0, 1.0);\n        vTextureCoord = ${ATTRIB_TEXTURE_COORD};\n        vTextureIdx = ${ATTRIB_TEXTURE_IDX};\n        vColor = ${ATTRIB_COLOR};\n      }\n      `;\n\nexport const BATCH_FRAGMENT_SHADER_SOURCE = `#version 300 es\n\n      precision mediump float;\n\n      in vec2 vTextureCoord;\n      in float vTextureIdx;\n      in vec4 vColor;\n\n      out vec4 oColor;\n\n      uniform sampler2D ${UNIFORM_SAMPLERS}[11];\n\n      void main() {\n        vec4 finalColor = vec4(0.0);\n        int tid = int(vTextureIdx + 0.5);\n\n        switch (tid)\n        {\n          case 0:\n            finalColor = texture(${UNIFORM_SAMPLERS}[0], vTextureCoord);\n            break;\n          case 1:\n            finalColor = texture(${UNIFORM_SAMPLERS}[1], vTextureCoord);\n            break;\n          case 2:\n            finalColor = texture(${UNIFORM_SAMPLERS}[2], vTextureCoord);\n            break;\n          case 3:\n            finalColor = texture(${UNIFORM_SAMPLERS}[3], vTextureCoord);\n            break;\n          case 4:\n            finalColor = texture(${UNIFORM_SAMPLERS}[4], vTextureCoord);\n            break;\n          case 5:\n            finalColor = texture(${UNIFORM_SAMPLERS}[5], vTextureCoord);\n            break;\n          case 6:\n            finalColor = texture(${UNIFORM_SAMPLERS}[6], vTextureCoord);\n            break;\n          case 7:\n            finalColor = texture(${UNIFORM_SAMPLERS}[7], vTextureCoord);\n            break;\n          case 8:\n            finalColor = texture(${UNIFORM_SAMPLERS}[8], vTextureCoord);\n            break;\n          case 9:\n            finalColor = texture(${UNIFORM_SAMPLERS}[9], vTextureCoord);\n            break;\n          case 10:\n            finalColor = texture(${UNIFORM_SAMPLERS}[10], vTextureCoord);\n            break;\n        }\n\n        oColor = finalColor;\n      }\n      `;\n        \n","import TextureManager from 'renderer/TextureManager';\nimport TileManagerInstance from 'renderer/TileManager';\nimport {\n  ATTRIB_POSITION,\n  ATTRIB_TEXTURE_COORD,\n  ATTRIB_TEXTURE_IDX,\n  ATTRIB_COLOR,\n  UNIFORM_SAMPLERS,\n} from 'renderer/constants';\n\nconst createIndices = (indicesSize) => {\n  let offset = 0;\n  let indices = new Uint16Array(indicesSize);\n\n  for (let i = 0; i < indicesSize; i += 6)\n  {\n    indices[i]     = offset;\n    indices[i + 1] = offset + 1;\n    indices[i + 2] = offset + 2;\n\n    indices[i + 3] = offset;\n    indices[i + 4] = offset + 2;\n    indices[i + 5] = offset + 3;\n\n    offset += 4;\n  }\n\n  return indices;\n}\n\nexport default class Batch2D {\n  constructor(gl, shaderProgram) {\n    this.gl = gl;\n    this.shaderProgram = shaderProgram;\n    this.textures = [];\n    this.textureManager = new TextureManager();\n    this.create();\n  }\n\n  create = () => {\n    const maxSprites  = 10000;\n    const floatsPerVertex = 9;\n    const bytesPerVertex = 4 * floatsPerVertex;\n    const floatsPerSprite = floatsPerVertex * 4;\n    const totalFloats = maxSprites * floatsPerSprite;\n    const indicesSize = 6 * maxSprites;\n\n    this.vertices = new Float32Array(totalFloats);\n    this.indices = createIndices(indicesSize);\n\n    this.VAO = this.gl.createVertexArray();\n    this.VBO = this.gl.createBuffer();\n    this.EBO = this.gl.createBuffer();\n\n    this.gl.bindVertexArray(this.VAO);\n\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VBO);\n    this.gl.bufferData(this.gl.ARRAY_BUFFER, this.vertices, this.gl.DYNAMIC_DRAW);\n\n    // Position\n    const locPosition = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_POSITION);\n    this.gl.vertexAttribPointer(locPosition, 2, this.gl.FLOAT, false, bytesPerVertex, 0);\n    this.gl.enableVertexAttribArray(locPosition);\n\n    // TextureCoord\n    const locTextureCoord = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_TEXTURE_COORD);\n    this.gl.vertexAttribPointer(locTextureCoord, 2, this.gl.FLOAT, false, bytesPerVertex, 2 * 4);\n    this.gl.enableVertexAttribArray(locTextureCoord);\n\n    // TextureIdx\n    const locTextureIdx = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_TEXTURE_IDX);\n    this.gl.vertexAttribPointer(locTextureIdx, 1, this.gl.FLOAT, false, bytesPerVertex, 4 * 4);\n    this.gl.enableVertexAttribArray(locTextureIdx);\n\n    // Color\n    const locColor = this.gl.getAttribLocation(this.shaderProgram.id, ATTRIB_COLOR);\n    this.gl.vertexAttribPointer(locColor, 4, this.gl.FLOAT, false, bytesPerVertex, 5 * 4);\n    this.gl.enableVertexAttribArray(locColor);\n\n    this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.EBO);\n    this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER, this.indices, this.gl.STATIC_DRAW);\n\n    // Used for emplacing tiles\n    this.vertexIndex = 0;\n\n    // Used for rendering\n    this.indexCount = 0;\n  }\n\n  begin = () => {\n    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.VBO);\n  }\n\n  emplace = (tileValue, position, color) => {\n    const tileData = TileManagerInstance.get(tileValue);\n    if (!tileData) {\n      console.error(`Could not get tile data for tile ${tileData}`);\n      return;\n    }\n\n    let r = 0.0;\n    let g = 0.0;\n    let b = 0.0;\n    let a = 0.0;\n\n    if (color) {\n      r = color.r;\n      g = color.g;\n      b = color.b;\n      a = color.a;\n    }\n\n    let textureIdx = 0.0;\n\n    if (this.textureManager.has(tileData.texture)) {\n      textureIdx = this.textureManager.getIndex(tileData.texture);\n    }\n    else {\n      this.textureManager.add(this.gl, tileData.texture);\n      textureIdx = this.textureManager.getIndex(tileData.texture);\n    }\n\n    // Top left\n    this.vertices[this.vertexIndex++] = position[0];\n    this.vertices[this.vertexIndex++] = position[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[0][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[0][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Top right\n    this.vertices[this.vertexIndex++] = position[0] + tileData.size[0];\n    this.vertices[this.vertexIndex++] = position[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[1][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[1][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Bottom right\n    this.vertices[this.vertexIndex++] = position[0] + tileData.size[0];\n    this.vertices[this.vertexIndex++] = position[1] + tileData.size[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[2][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[2][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    // Bottom left\n    this.vertices[this.vertexIndex++] = position[0];\n    this.vertices[this.vertexIndex++] = position[1] + tileData.size[1];\n    this.vertices[this.vertexIndex++] = tileData.uv[3][0];\n    this.vertices[this.vertexIndex++] = tileData.uv[3][1];\n    this.vertices[this.vertexIndex++] = textureIdx;\n    this.vertices[this.vertexIndex++] = r;\n    this.vertices[this.vertexIndex++] = g;\n    this.vertices[this.vertexIndex++] = b;\n    this.vertices[this.vertexIndex++] = a;\n\n    this.indexCount += 6;\n  }\n\n  flush = () => {\n    this.gl.bufferSubData(this.gl.ARRAY_BUFFER, 0, this.vertices.subarray(0, this.vertexIndex));\n    this.vertexIndex = 0;\n  }\n\n  render = (shader) => {\n    if (this.indexCount === 0) {\n      return;\n    }\n\n    let idx = 0;\n    this.textureManager.map.forEach(texture => {\n      this.gl.activeTexture(this.gl.TEXTURE0 + idx);\n      texture.bind(this.gl);\n      this.shaderProgram.setInt(`${UNIFORM_SAMPLERS}[${idx}]`, idx);\n      ++idx;\n    });\n\n    this.gl.activeTexture(this.gl.TEXTURE0);\n\n    this.gl.bindVertexArray(this.VAO);\n    this.gl.drawElements(this.gl.TRIANGLES, this.indexCount, this.gl.UNSIGNED_SHORT, 0);\n    this.indexCount = 0;\n  }\n}\n","import { mat4 } from 'gl-matrix';\n\nconst ZOOM_MAX = 5.0;\nconst ZOOM_MIN = 0.25;\nconst ZOOM_THRESHOLD = 10;\n\nconst zoomLevels = [0.25, 0.5, 0.75, 1.0, 1.25, 1.5, 1.75];\n\nclass Camera {\n  constructor(width, height) {\n    this.width = width;\n    this.height = height;\n    this.zoomLevel = 3;\n    this.zoom = 0;\n    this.perceivedWidth = this.width;\n    this.perceivedHeight = this.height;\n    this.origin = [0.0, 0.0];\n    this.clientOrigin = [0.0, 0.0];\n    this.cameraZ = 80.0;\n    this.position = [0.0, 0.0, this.cameraZ];\n    this.near = 0.1;\n    this.far = 100.0;\n    this.projection = mat4.create();\n    this.modelView = mat4.create();\n    this.mvp = mat4.create();\n\n    mat4.translate(this.modelView, this.modelView, [0.0, 0.0, -this.cameraZ]);\n    this.calculateMvp();\n  }\n\n  setOrigin = (x, y) => {\n    this.origin = [this.position[0], this.position[1]];\n    this.clientOrigin = [x, y];\n  }\n\n  moveTo = (x, y) => {\n    this.position = [this.origin[0] + (this.clientOrigin[0] - x), this.origin[1] + (this.clientOrigin[1] - y), this.cameraZ];\n    this.calculateMvp();\n  }\n\n  setZoom = (zoom) => {\n    // Clamp zoom value\n    this.zoom = this.clampZoom(zoom);\n    this.calculateMvp();\n  }\n\n  applyZoom = (zoom) => {\n    this.zoom += zoom;\n\n    if (Math.abs(this.zoom) < ZOOM_THRESHOLD) {\n      return;\n    }\n\n    if (this.zoom < 0) {\n      this.zoomLevel = Math.max(0, this.zoomLevel - 1);\n    }\n    else if (this.zoom > 0) {\n      this.zoomLevel = Math.min(zoomLevels.length - 1, this.zoomLevel + 1);\n    }\n\n    this.perceivedWidth = this.width / zoomLevels[this.zoomLevel];\n    this.perceivedHeight = this.height / zoomLevels[this.zoomLevel];\n    this.zoom = 0;\n    this.calculateMvp();\n  }\n\n  getMvp = () => {\n    return this.mvp;\n  }\n\n  getZoomLevel = () => {\n    return zoomLevels[this.zoomLevel];\n  }\n\n  calculateMvp = () => {\n    // TODO: Anchor on center when zooming\n    const computedPositionX = this.position[0] / zoomLevels[this.zoomLevel];\n    const computedPositionY = this.position[1] / zoomLevels[this.zoomLevel];\n\n    mat4.ortho(this.projection,\n               computedPositionX,\n               this.perceivedWidth + computedPositionX,\n               this.perceivedHeight + computedPositionY,\n               computedPositionY,\n               this.near,\n               this.far);\n\n    //mat4.ortho(this.projection,\n              //(this.width - this.perceivedWidth) + this.position[0] / zoomLevels[this.zoomLevel],\n              //this.perceivedWidth + this.position[0] / zoomLevels[this.zoomLevel],\n              //this.perceivedHeight + this.position[1] / zoomLevels[this.zoomLevel],\n              //(this.height - this.perceivedHeight) + this.position[1] / zoomLevels[this.zoomLevel],\n              //this.near,\n              //this.far);\n\n    mat4.multiply(this.mvp, this.projection, this.modelView);\n  }\n};\n\nexport default Camera;\n","import store from 'redux/store';\nimport TilemapInstance from 'tilemap';\nimport ShaderProgram from 'renderer/Shader';\nimport Batch2D from 'renderer/Batch2D';\nimport Texture from 'renderer/Texture';\nimport Camera from 'renderer/Camera';\nimport {\n  UNIFORM_MVP,\n  BATCH_VERTEX_SHADER_SOURCE,\n  BATCH_FRAGMENT_SHADER_SOURCE,\n} from 'renderer/constants';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nclass Renderer {\n  hasInitialized = false\n\n  init = (gl) => {\n    console.log('DEBUG: CONSTRUCTING RENDERER');\n\n    this.gl = gl;\n    if (!this.gl) {\n      return;\n    }\n\n    this.shaderProgram = new ShaderProgram(this.gl, BATCH_VERTEX_SHADER_SOURCE, BATCH_FRAGMENT_SHADER_SOURCE);\n    this.shaderProgram.use();\n\n    this.camera = new Camera(this.gl.canvas.width, this.gl.canvas.height);\n    //this.camera.setPosition(100, 100);\n\n    this.shaderProgram.setMat4(UNIFORM_MVP, this.camera.getMvp());\n\n    this.batch = new Batch2D(this.gl, this.shaderProgram);\n    this.hasInitialized = true;\n  }\n\n  setClearColor = (r, g, b, a) => {\n    this.gl.clearColor(r, g, b, a);\n  }\n\n  //updateViewport = (width, height) => {\n    //this.gl.viewport(0, 0, width, height);\n    //const projectionMatrix = mat4.create();\n    //mat4.ortho(projectionMatrix, 0, width, height, 0, 0.1, 100.0);\n    //this.shaderProgram.use();\n    //this.shaderProgram.setMat4(UNIFORM_PROJECTION, projectionMatrix);\n  //}\n\n  render = () => {\n    this.gl.clear(this.gl.COLOR_BUFFER_BIT);\n    this.renderGrid();\n    window.requestAnimationFrame(this.render);\n  }\n\n  renderGrid = () => {\n    // Return early if the wasm module hasn't loaded yet\n    if (!TilemapInstance.hasInitialized) {\n      return;\n    }\n\n    this.shaderProgram.use();\n\n    // TODO: Get offset and zoom from camera\n    // to get the actual tiles to render from rust\n    const canvasWidth = this.gl.canvas.width;\n    const canvasHeight = this.gl.canvas.height;\n    const layersState = store.getState().layers;\n    this.shaderProgram.setMat4(UNIFORM_MVP, this.camera.getMvp());\n\n    this.batch.begin();\n\n    for (const layerName of layersState.names) {\n      const layer = layersState.layers[layerName];\n      if (!layer.visible) {\n        continue;\n      }\n\n      if (layer.id >= 0) {\n        for (let i = 0, y = 0; y < canvasHeight; i++, y += tileSize[1]) {\n          for (let j = 0, x = 0; x < canvasWidth; j++, x += tileSize[0]) {\n            const value = TilemapInstance.get(j, i, layer.id);\n\n            if (value != -1) {\n              this.batch.emplace(value, [x, y]);\n            }\n          }\n        }\n      }\n    }\n\n\n    this.batch.flush();\n    this.batch.render(this.shaderProgram);\n  }\n}\n\nconst RendererInstance = new Renderer();\n\nexport default RendererInstance;\n","import { forwardRef } from 'react';\n\nconst AbsoluteCanvas = forwardRef(({ id, style, onMouseDown, onMouseMove, onMouseUp, onWheel, onDragStart, onDrag }, ref) => (\n  // ====================================\n  // Render\n  // ====================================\n  <canvas id={id}\n          style={{...style, position: 'absolute', top: '0', left: '0'}}\n          onMouseDown={onMouseDown}\n          onMouseMove={onMouseMove}\n          onMouseUp={onMouseUp}\n          onWheel={onWheel}\n          onDragStart={onDragStart}\n          onDrag={onDrag}\n          draggable='true'\n          ref={ref}/>\n));\n\nexport default AbsoluteCanvas;\n","import { useEffect, useRef } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addLayer } from 'redux/actions';\nimport RendererInstance from 'renderer/Renderer';\nimport TilemapInstance from 'tilemap';\nimport AbsoluteCanvas from 'ui/common/AbsoluteCanvas';\nimport { TILEMAP_CANVAS_ID } from 'ui/constants';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nconst WebGLCanvas = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const tilesCanvasRef = useRef();\n\n  // ====================================\n  // Logic\n  // ====================================\n  useEffect(() => {\n    if (!tilesCanvasRef.current) {\n      return;\n    }\n\n    // Update canvas sizes\n    tilesCanvasRef.current.width = tilesCanvasRef.current.clientWidth;\n    tilesCanvasRef.current.height = tilesCanvasRef.current.clientHeight;\n\n    if (!TilemapInstance.hasInitialized) {\n      // TODO: Remove dispatch from here and add a layer only if there isn't any\n      TilemapInstance.init().then(() => {\n        dispatch(addLayer(null, 0, 0, Math.floor(tilesCanvasRef.current.width / tileSize[0]) + 1,\n                                      Math.floor(tilesCanvasRef.current.height / tileSize[1]) + 1));\n      });\n    }\n\n    if (!RendererInstance.hasInitialized) {\n      RendererInstance.init(tilesCanvasRef.current.getContext('webgl2'));\n      //RendererInstance.setClearColor(55.0 / 255.0, 65.0 / 255.0, 81.0 / 255.0, 1.0);\n      RendererInstance.setClearColor(31.0 / 255.0, 41.0 / 255.0, 55.0 / 255.0, 1.0);\n      window.requestAnimationFrame(RendererInstance.render);\n    }\n  }, [dispatch]);\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <AbsoluteCanvas\n      id={TILEMAP_CANVAS_ID}\n      style={{ width: '100%', height: '100%', zIndex: '0' }}\n      ref={tilesCanvasRef}\n    />\n  );\n}\n\nexport default WebGLCanvas;\n","import { useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTool } from 'redux/actions';\nimport { getTilePositionOnClick } from 'utils/tile';\nimport { EDITOR_CANVAS_ID } from 'ui/constants';\nimport RendererInstance from 'renderer/Renderer';\nimport TilemapInstance from 'tilemap';\nimport AbsoluteCanvas from 'ui/common/AbsoluteCanvas';\nimport * as tools from 'ui/canvas/tools';\n\n// TODO: Provide a method to change tile size per layer\nconst tileSize = [32, 32];\n\nconst EditorCanvas = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const editingCanvasRef = useRef();\n  const { selectedLayer, layers } = useSelector(state => ({ selectedLayer: state.layers.selected, layers: state.layers.layers }));\n  const selectedTile = useSelector(state => state.tileset.selectedTile);\n  const selectedTool = useSelector(state => state.canvas.selectedTool);\n\n  // ====================================\n  // Logic\n  // ====================================\n  useEffect(() => {\n    const refElement = editingCanvasRef.current;\n    if (!refElement) {\n      return;\n    }\n\n    editingCanvasRef.current.width = refElement.clientWidth;\n    editingCanvasRef.current.height = refElement.clientHeight;\n\n    // Used to allow preventing default wheel behavior on chrome\n    const cancelWheel = event => event.preventDefault();\n    refElement.addEventListener('wheel', cancelWheel, {passive: false});\n    return () => {\n        refElement.removeEventListener('wheel', cancelWheel);\n    }\n  }, []);\n\n  useEffect(() => {\n    const panToolStartHandler = ({ key }) => {\n      if (key === ' ') {\n        dispatch(selectTool(tools.PAN_TOOL));\n      }\n    }\n\n    // TODO: Create a stack of tools to be able to get back\n    // to the previous tool instead of the default one\n    const panToolEndHandler = ({ key }) => {\n      if (key === ' ') {\n        dispatch(selectTool(tools.DEFAULT_TOOL));\n      }\n    }\n\n    window.addEventListener('keydown', panToolStartHandler);\n    window.addEventListener('keyup', panToolEndHandler);\n    return () => {\n      window.removeEventListener('keydown', panToolStartHandler);\n      window.removeEventListener('keyup', panToolEndHandler);\n    };\n  }, [dispatch]);\n\n  const handleOneTimeTools = e => {\n    switch (selectedTool) {\n      case tools.FILL_TOOL: {\n        const zoomLevel = RendererInstance.camera.getZoomLevel();\n        const position = getTilePositionOnClick(e, [tileSize[0] * zoomLevel, tileSize[1] * zoomLevel], RendererInstance.camera.position);\n        const layerId = layers[selectedLayer].id;\n\n        TilemapInstance.fill(...position, selectedTile, layerId);\n        break;\n      }\n\n      case tools.PAN_TOOL: {\n        RendererInstance.camera.setOrigin(e.clientX, e.clientY);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  const handleContinuousTools = e => {\n    const zoomLevel = RendererInstance.camera.getZoomLevel();\n    const position = getTilePositionOnClick(e, [tileSize[0] * zoomLevel, tileSize[1] * zoomLevel], RendererInstance.camera.position);\n    const layerId = layers[selectedLayer].id;\n\n    switch (selectedTool) {\n      case tools.DEFAULT_TOOL: {\n        break;\n      }\n\n      case tools.PLACEMENT_TOOL: {\n        if (selectedTile && selectedTile !== -1) {\n          TilemapInstance.set(...position, selectedTile, layerId);\n        }\n        break;\n      }\n\n      case tools.PAN_TOOL: {\n        if (e.clientX == 0 || e.clientY == 0) {\n          break;\n        }\n\n        RendererInstance.camera.moveTo(e.clientX, e.clientY);\n        break;\n      }\n\n      default:\n        break;\n    }\n  }\n\n  const handleMouseDown = e => {\n    handleOneTimeTools(e);\n    handleContinuousTools(e);\n  }\n\n  const handleDrag = e => {\n    handleContinuousTools(e);\n  }\n\n  const handleWheel = e => {\n    if (!e.altKey) {\n      return;\n    }\n\n    RendererInstance.camera.applyZoom(e.deltaY);\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <AbsoluteCanvas\n      id={EDITOR_CANVAS_ID}\n      style={{ width: '100%', height: '100%', zIndex: '1' }}\n      onMouseDown={handleMouseDown}\n      onDrag={handleContinuousTools}\n      onWheel={handleWheel}\n      ref={editingCanvasRef}\n    />\n  );\n}\n\nexport default EditorCanvas;\n","import Toolbar from 'ui/canvas/Toolbar';\nimport WebGLCanvas from 'ui/canvas/WebGLCanvas';\nimport EditorCanvas from 'ui/canvas/EditorCanvas';\n\nconst Canvas = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className='col-span-3 flex flex-col'>\n      <Toolbar />\n      <section className='relative flex-1 bg-gray-600'>\n        <EditorCanvas />\n        <WebGLCanvas />\n      </section>\n    </div>\n  );\n}\n\nexport default Canvas;\n","import { NavLink } from \"react-router-dom\";\nimport Icon from '@mdi/react';\n\nconst TabButton = ({ iconPath, routerPath }) => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <NavLink to={routerPath} activeClassName='text-indigo-200 bg-indigo-900'>\n      <button className='px-2 py-3 hover:text-indigo-400 hover:bg-indigo-900' data-tip data-for={routerPath}>\n        <Icon path={iconPath} size={1.2} />\n      </button>\n    </NavLink>\n  );\n}\n\nexport default TabButton;\n","import ReactTooltip from \"react-tooltip\";\nimport tooltips from 'ui/tooltips';\nimport TabButton from 'ui/sidebar/TabButton';\nimport * as tabs from 'ui/sidebar/tabs';\nimport { dividerBorderColor } from 'ui/common/styles';\nimport { TOOLTIP_DELAY } from 'ui/constants';\nimport {\n  mdiMap,\n  mdiViewModule,\n  mdiContentSave,\n  mdiUpload,\n  mdiHelpCircleOutline,\n  mdiCog,\n} from '@mdi/js';\n\nconst TabSelector = () => {\n  // ====================================\n  // Render\n  // ====================================\n  const sectionsData = [\n    { path: tabs.TAB_TILES, icon: mdiViewModule },\n    { path: tabs.TAB_MAP, icon: mdiMap },\n    { path: tabs.TAB_IMPORT, icon: mdiUpload },\n    { path: tabs.TAB_EXPORT, icon: mdiContentSave },\n    { path: tabs.TAB_SETTINGS, icon: mdiCog },\n    { path: tabs.TAB_HELP, icon: mdiHelpCircleOutline },\n  ];\n\n  const sections = sectionsData.map(section =>\n    <div key={section.path} className='flex' data-testid={section.path}>\n      <TabButton routerPath={section.path} iconPath={section.icon}/>\n      <ReactTooltip id={section.path} place='right' effect='solid' delayShow={TOOLTIP_DELAY}>\n        {tooltips.get(section.path)}\n      </ReactTooltip>\n    </div>);\n\n  return (\n    <div className={`flex flex-col justify-end bg-black border-r ${dividerBorderColor}`}>\n      {sections}\n    </div>\n  );\n}\n\nexport default TabSelector;\n","import { dividerBorderColor, titleBarHeight } from './styles.js';\n\nconst Tab = ({ children, title }) => {\n  return (\n    <div>\n      <h2 className={`${titleBarHeight} bg-black border-b ${dividerBorderColor} px-2 flex items-center`}>\n        {title}\n      </h2>\n      {children}\n    </div>\n  );\n}\n\nexport default Tab;\n","export const getLayersState = state => state.layers;\n\nexport const getLayersNames = state =>\n  getLayersState(state) ? getLayersState(state).names : [];\n\nexport const getLayerByName = (state, name) =>\n  getLayersState(state) ? { ...getLayersState(state).layers[name], name } : {};\n\nexport const getLayers = state =>\n  getLayersNames(state).map(name => getLayerByName(state, name));\n\nexport const getLayersByAddedTime = state => getLayers(state).reverse();\n\nexport const getVisibleLayers = state => {\n  const layersState = getLayersState(state);\n  return layersState.names.filter(name => layersState.layers[name].visible).reverse();\n}\n","import { useState } from 'react';\nimport { Collapse } from 'react-collapse';\nimport 'ui/common/CollapseTab.css';\nimport Icon from '@mdi/react';\nimport { mdiMenuDown, mdiMenuRight } from '@mdi/js';\nimport { dividerBorderColor, titleBarHeight } from './styles.js';\n\nconst CollapseSection = ({ title, children }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [open, setOpen] = useState(true);\n  const icon = open ? mdiMenuDown : mdiMenuRight;\n  const sectionClass = open ? `border-b ${dividerBorderColor}` : '';\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className={sectionClass}>\n      <div className={`flex items-center hover:bg-gray-800 cursor-pointer border-b ${dividerBorderColor} ${titleBarHeight}`}\n           onDoubleClick={e => setOpen(!open)}\n      >\n        <Icon path={icon} size={1} />\n\n        <h1 className='select-none'>\n          {title}\n        </h1>\n      </div>\n\n      <Collapse isOpened={open}>\n        <div className='text-xs text-gray-400 px-2 py-4'>\n          {children}\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n\nexport default CollapseSection;\n","import { useDispatch } from 'react-redux';\nimport { Draggable } from 'react-beautiful-dnd';\nimport { selectLayer, toggleLayerVisibility } from 'redux/actions';\nimport { mdiEye, mdiEyeOffOutline } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport * as testIds from 'resources/testIds';\n\nconst LayerItem = ({ layer, index, isSelected }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleLayerClick = () => {\n    dispatch(selectLayer(layer.name));\n  }\n\n  const handleEyeClick = () => {\n    dispatch(toggleLayerVisibility(layer.name));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const icon = layer.visible ? mdiEye : mdiEyeOffOutline;\n  const selectedClassName = isSelected ? 'bg-gray-700' : 'hover:bg-gray-800';\n  const visibilityTestId = layer.visible ? testIds.LAYER_VISIBLE : testIds.LAYER_HIDDEN;\n\n  return (\n    <Draggable draggableId={layer.name} index={index}>\n      {(provided, snapshop) => {\n        const style = {\n          cursor: 'default',\n          ...provided.draggableProps.style,\n        };\n\n        return (\n          <li className={`flex items-center select-none ${selectedClassName}`}\n              ref={provided.innerRef}\n              {...provided.draggableProps}\n              {...provided.dragHandleProps}\n              style={style}\n              data-testid={visibilityTestId}\n          >\n            <span className='flex-1 pl-4 py-1' onClick={handleLayerClick}>\n              {layer.name}\n            </span>\n            <span onClick={handleEyeClick} className='cursor-pointer pr-4 py-1' data-testid={testIds.HIDE_LAYER_BUTTON}>\n              <Icon path={icon} size={0.6} />\n            </span>\n          </li>);\n        }\n      }\n    </Draggable>\n  );\n}\n\nexport default LayerItem;\n","import { useDispatch } from 'react-redux';\nimport { addLayer, deleteLayer } from 'redux/actions';\nimport { mdiDelete, mdiPlaylistPlus } from '@mdi/js';\nimport Icon from '@mdi/react';\nimport * as testIds from 'resources/testIds';\n\nconst LayerListFooter = ({ selectedLayer }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const handleAddClick = () => {\n    dispatch(addLayer());\n  }\n\n  const handleDeleteClick = () => {\n    dispatch(deleteLayer(selectedLayer));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div className='flex items-center justify-start py-3'>\n      <button onClick={handleAddClick} data-testid={testIds.ADD_LAYER_BUTTON}>\n        <Icon path={mdiPlaylistPlus} size={0.7} />\n      </button>\n      <button onClick={handleDeleteClick} data-testid={testIds.DELETE_LAYER_BUTTON}>\n        <Icon path={mdiDelete} size={0.65} />\n      </button>\n    </div>\n  );\n}\n\nexport default LayerListFooter;\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getLayersByAddedTime } from 'redux/selectors';\nimport CollapseSection from 'ui/common/CollapseTab';\nimport LayerListItem from 'ui/sidebar/tileset/LayerListItem';\nimport LayerListFooter from 'ui/sidebar/tileset/LayerListFooter';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { selectLayer, moveLayer } from 'redux/actions';\n\nconst LayerList = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  const { selectedLayer, layers } =\n    useSelector(state => ({ selectedLayer: state.layers.selected, layers: getLayersByAddedTime(state) }));\n\n  const handleLayerBeforeDragStart = e => {\n    dispatch(selectLayer(e.draggableId));\n  }\n\n  const handleLayerDragEnd = e => {\n    dispatch(moveLayer(e.draggableId, layers.length - e.destination.index - 1));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const layerComponents =\n    layers.map((l, i) => <LayerListItem key={l.name}\n                                        index={i}\n                                        layer={l}\n                                        isSelected={l.name === selectedLayer}\n                         />);\n\n  const dndArea = layers && layers.length\n    ? <DragDropContext onDragEnd={handleLayerDragEnd} onBeforeDragStart={handleLayerBeforeDragStart}>\n        <Droppable droppableId='layers'>\n          {(provided) => (\n            <ul {...provided.droppableProps} ref={provided.innerRef}>\n              {layerComponents}\n              {provided.placeholder}\n            </ul>\n          )}\n        </Droppable>\n      </DragDropContext>\n    : <div />;\n\n  return (\n    <CollapseSection title='Layers'>\n      {dndArea}\n      <LayerListFooter selectedLayer={selectedLayer} />\n    </CollapseSection>\n  );\n}\n\nexport default LayerList;\n","import { useEffect, useState, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getTextureData } from 'idb';\nimport { selectTile } from 'redux/actions';\nimport { getTilePositionOnClick } from 'utils/tile';\nimport {\n  GRID_COLOR,\n  GRID_CANVAS_ID,\n  TILESET_CANVAS_ID,\n  SELECTED_TILE_COLOR_OVERLAY,\n} from 'ui/constants';\n\nconst tileSize = [32, 32];\n\nconst drawGridLines = (canvas, tileDimensions) => {\n  const context = canvas.getContext('2d');\n  context.strokeStyle = GRID_COLOR;\n  context.lineWidth = 1;\n\n  // Draw horizontal lines\n  for (let j = tileDimensions[0]; j < canvas.height; j += tileDimensions[0]) {\n    context.beginPath();\n    context.moveTo(0, j + 0.5);\n    context.lineTo(canvas.width, j + 0.5);\n    context.stroke();\n  }\n\n  // Draw vertical lines\n  for (let i = tileDimensions[1]; i < canvas.width; i += tileDimensions[1]) {\n    context.beginPath();\n    context.moveTo(i + 0.5, 0);\n    context.lineTo(i + 0.5, canvas.height);\n    context.stroke();\n  }\n}\n\nconst TilesetPreview = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const selectedTileset = useSelector(state => state.tileset.selectedTileset);\n  const [selectedTile, setSelectedTile] = useState([-1, -1]);\n  const [tilesetIndex, setTilesetIndex] = useState(0);\n  const tilegridCanvasRef = useRef(null);\n  const tilesetCanvasRef = useRef(null);\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Load a new tileset to the preview\n  useEffect(() => {\n    if (!selectedTileset || !tilegridCanvasRef.current || !tilesetCanvasRef.current) {\n      return;\n    }\n\n    const tilesetCanvas = tilesetCanvasRef.current;\n    const tilegridCanvas = tilegridCanvasRef.current;\n\n    // Add image to canvas\n    getTextureData(selectedTileset).then(data => {\n      const reader = new FileReader();\n\n      reader.onload = e => {\n        const image = new Image();\n        image.onload = () => {\n          tilesetCanvas.width = image.width;\n          tilesetCanvas.height = image.height;\n\n          tilegridCanvas.width = image.width;\n          tilegridCanvas.height = image.height;\n\n          const tilesetContext = tilesetCanvas.getContext('2d');\n          tilesetContext.drawImage(image, 0, 0);\n          drawGridLines(tilesetCanvas, tileSize);\n          setTilesetIndex(data.tilesetIndex);\n        }\n        image.src = e.target.result;\n      }\n      reader.readAsDataURL(data.file);\n    });\n  }, [selectedTileset]);\n\n  // Draw highlight on selected tile\n  useEffect(() => {\n    if (!tilegridCanvasRef.current) {\n      return;\n    }\n\n    const canvas = tilegridCanvasRef.current;\n    const context = canvas.getContext('2d');\n    // Draw square on selected tile\n    context.fillStyle = SELECTED_TILE_COLOR_OVERLAY;\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    context.fillRect(selectedTile[0] * tileSize[0] + 1,\n                     selectedTile[1] * tileSize[1] + 1,\n                     tileSize[0] - 1,\n                     tileSize[1] - 1);\n  }, [selectedTile]);\n\n  const onSelectTile = e => {\n    const tilePos = getTilePositionOnClick(e, tileSize);\n    const tileIndex = tilesetIndex + tilePos[1] * Math.floor(e.target.width / tileSize[0]) + tilePos[0]\n    dispatch(selectTile(tileIndex));\n    setSelectedTile(tilePos);\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const tilesetPreview = selectedTileset === ''\n    ? <div />\n    : (<div className='max-h-40 overflow-scroll border'>\n         <div className='grid'>\n           <canvas id={GRID_CANVAS_ID} onMouseUp={onSelectTile} ref={tilegridCanvasRef} className='col-span-full row-span-full z-10' />\n           <canvas id={TILESET_CANVAS_ID} ref={tilesetCanvasRef} className='col-span-full row-span-full z-0' />\n         </div>\n       </div>);\n\n  return tilesetPreview;\n}\n\nexport default TilesetPreview;\n","import { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectTileset } from 'redux/actions';\nimport { LOCAL_STORAGE_LAST_SELECTED_TILESET } from 'ui/constants';\nimport * as testIds from 'resources/testIds';\n\nconst TilesetSelector = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n  const { selectedTileset, tilesetNames } = useSelector(state => state.tileset);\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Get last tileset used from localStorage\n  useEffect(() => {\n    const lastSelectedTileset = localStorage.getItem(LOCAL_STORAGE_LAST_SELECTED_TILESET);\n\n    // TODO: Check if tileset exists\n    if (lastSelectedTileset) {\n      dispatch(selectTileset(lastSelectedTileset));\n    }\n  }, [dispatch]);\n\n  const onOptionSelected = e => {\n    const name = e.target.value;\n    localStorage.setItem(LOCAL_STORAGE_LAST_SELECTED_TILESET, name);\n    dispatch(selectTileset(name));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  const options = [];\n  for (const value of tilesetNames) {\n    options.push(<option value={value} key={value} data-testid={value}>{value}</option>);\n  }\n\n  return (\n    tilesetNames.length > 0 &&\n    <select\n      className='text-gray-900'\n      value={selectedTileset}\n      onChange={onOptionSelected}\n      data-testid={testIds.SELECT_TILESET}\n    >\n      {options}\n    </select>\n  );\n}\n\nexport default TilesetSelector;\n","const FileInput = ({ title, onUpload }) => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div>\n      <p>{title}</p>\n      <input\n        type='file'\n        min='1'\n        max='100'\n        value=''\n        onChange={onUpload} />\n    </div>\n  );\n};\n\nexport default FileInput;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { addTileset, addTilesets } from 'redux/actions';\nimport { setTextureData, getTextureNames, hasTexture } from 'idb';\nimport LayerList from 'ui/sidebar/tileset/LayerList';\nimport TileManagerInstance from 'renderer/TileManager';\nimport TilesetPreview from 'ui/sidebar/tileset/TilesetPreview';\nimport TilesetSelector from 'ui/sidebar/tileset/TilesetSelector';\nimport CollapseSection from 'ui/common/CollapseTab';\nimport FileInput from 'ui/common/FileInput';\nimport {\n  ADD_TILESET_TITLE,\n  LOCAL_STORAGE_LAST_SELECTED_TILESET,\n} from 'ui/constants';\n\nconst TilesetManager = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const dispatch = useDispatch();\n\n  // ====================================\n  // Logic\n  // ====================================\n  // Get available tilesets\n  useEffect(() => {\n    getTextureNames().then(async textures => {\n      dispatch(addTilesets(textures));\n\n      // Create tiles from textures\n      // Respects order of creation\n      // TODO: replace hardcoded 32 x 32 tile size with a user defined one\n      for (const texture of textures.reverse()) {\n        await TileManagerInstance.addTilesFromTileset(texture, [32, 32]);\n      }\n    });\n  }, [dispatch]);\n\n  const onTilesetUpload = async (event) => {\n    if (event.target.files.length <= 0) {\n      return;\n    }\n\n    // TODO: If the texture already exists, choose a new name\n    let name = event.target.files[0].name;\n\n    try {\n      const fileBlob = event.target.files[0];\n      if (!fileBlob) {\n        return;\n      }\n\n      await setTextureData(name, { file: fileBlob, tilesetIndex: TileManagerInstance.length });\n    } catch (err) {\n      console.error(err);\n      return;\n    }\n\n    // Create tiles from the texture\n    TileManagerInstance.addTilesFromTileset(name, [32, 32]);\n    localStorage.setItem(LOCAL_STORAGE_LAST_SELECTED_TILESET, name);\n    dispatch(addTileset(name));\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <CollapseSection title='Tileset'>\n      <TilesetSelector />\n      <FileInput title={ADD_TILESET_TITLE} onUpload={e => onTilesetUpload(e) }/>\n      <TilesetPreview />\n    </CollapseSection>\n  );\n}\n\nexport default TilesetManager;\n","import Tab from 'ui/common/Tab';\nimport LayerList from 'ui/sidebar/tileset/LayerList';\nimport TilesetSettings from 'ui/sidebar/tileset/TilesetSettings';\n\nconst Edit = () => {\n  return (\n    <Tab title='Edit'>\n      <LayerList />\n      <TilesetSettings />\n    </Tab>\n  );\n}\n\nexport default Edit;\n","export default function SliderInput(props) {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <div>\n      <p><strong>{props.title}</strong></p>\n      <span>{props.value}px</span>\n      <input\n        type='range'\n        min='1'\n        max='100'\n        value={props.value}\n        onChange={props.onChange}\n      />\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport Tab from 'ui/common/Tab';\nimport Slider from 'ui/common/SliderInput';\n\nconst MapSettings = (props) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [tileSize, setTileSize] = useState(32);\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Map Settings'>\n      <Slider title=\"Tile size\" onChange={e => setTileSize(e.target.value)} value={tileSize} />\n    </Tab>\n  );\n}\n\nexport default MapSettings;\n","import Tab from 'ui/common/Tab';\n\nconst ImportSettings = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Import'>\n      <h3>Import</h3>\n    </Tab>\n  );\n}\n\nexport default ImportSettings;\n","import * as formats from 'ui/sidebar/export/formats';\n\nconst FormatSelector = ({ format, onOptionSelected }) => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const formatsArray = [\n    formats.FORMAT_JSON,\n    formats.FORMAT_TMX,\n  ];\n\n  // ====================================\n  // Render\n  // ====================================\n  const formatOptions = formatsArray.map(format => <option key={format} value={format}>{format}</option>);\n\n  return (\n    <select\n      className='text-gray-900'\n      value={format}\n      onChange={onOptionSelected}>\n      {formatOptions} \n    </select>\n  );\n}\n\nexport default FormatSelector;\n","export const FORMAT_JSON = 'json';\nexport const FORMAT_TMX = 'tmx';\n","import { useState } from 'react';\nimport Tab from 'ui/common/Tab';\nimport * as formats from 'ui/sidebar/export/formats';\nimport TilemapInstance from 'tilemap';\nimport FormatSelector from 'ui/sidebar/export/FormatSelector';\n\nconst ExportSettings = () => {\n  // ====================================\n  // Initialize\n  // ====================================\n  const [format, setFormat] = useState(formats.FORMAT_TMX);\n\n  // ====================================\n  // Logic\n  // ====================================\n  const onOptionSelected = e => {\n    setFormat(e.target.value);\n  }\n\n  const handleExport = async () => {\n    const rawData = TilemapInstance.dump(format);\n    const filename = 'tilemap.' + format;\n    const blob = new Blob([rawData], {type : 'application/xml'});\n    const a = document.createElement('a');\n\n    a.href = URL.createObjectURL(blob);\n    a.download =  filename;\n    a.click();\n  }\n\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Export Map'>\n      <FormatSelector format={format} onOptionSelected={onOptionSelected} />\n      <button className='bg-indigo-900 my-3 py-2 px-4 flex justify-center rounded cursor-pointer'\n              onClick={handleExport}\n      >\n        Export\n      </button>\n    </Tab>\n  );\n}\n\nexport default ExportSettings;\n","import Tab from 'ui/common/Tab';\n\nconst ProjectSettings = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Project Settings'>\n      <label htmlFor='show-grid'>Show grid</label>\n      <input type='checkbox' name='show-grid' />\n    </Tab>\n  );\n}\n\nexport default ProjectSettings;\n","import Tab from 'ui/common/Tab';\n\nconst Help = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <Tab title='Help'>\n      <div style={{ height: '200px' }}>\n      <div style={{ overflow: 'scroll', height: '100%' }}>\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n          ajshdasjdasdajsd kjasdkj askjd kjas jdaks jdaks jdkksa dj kjadjk asjk djkjkd akskj dakj dksad kajsdk jaskjd\n      </div>\n      </div>\n    </Tab>\n  );\n}\n\nexport default Help;\n\n","import TabSelector from 'ui/sidebar/TabSelector';\nimport Edit from 'ui/sidebar/tileset/Edit';\nimport MapSettings from 'ui/sidebar/map/MapSettings';\nimport ImportSettings from 'ui/sidebar/import/ImportSettings';\nimport ExportSettings from 'ui/sidebar/export/ExportSettings';\nimport ProjectSettings from 'ui/sidebar/project/ProjectSettings';\nimport Help from 'ui/sidebar/Help';\nimport { Switch, Route } from \"react-router-dom\";\nimport { dividerBorderColor } from 'ui/common/styles';\nimport * as tabs from './tabs';\n\nconst Sidebar = () => {\n  // ====================================\n  // Render\n  // ====================================\n  return (\n    <aside className={`flex flex-row bg-gray-900 border-r ${dividerBorderColor}`}>\n      <TabSelector />\n      <div className='flex-1'>\n        <Switch>\n          <Route path={`/${tabs.TAB_TILES}`}>\n            <Edit />\n          </Route>\n\n          <Route path={`/${tabs.TAB_MAP}`}>\n            <MapSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_IMPORT}`}>\n            <ImportSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_EXPORT}`}>\n            <ExportSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_SETTINGS}`}>\n            <ProjectSettings />\n          </Route>\n\n          <Route path={`/${tabs.TAB_HELP}`}>\n            <Help />\n          </Route>\n        </Switch>\n      </div>\n    </aside>\n  );\n};\n\nexport default Sidebar;\n","import Canvas from 'ui/canvas/Canvas';\nimport Sidebar from 'ui/sidebar/Sidebar';\nimport { HashRouter } from \"react-router-dom\";\nimport { dividerBorderColor } from 'ui/common/styles';\n\nconst App = () => {\n  return (\n    <div className={`h-screen w-screen flex flex-col text-gray-50 bg-gray-900 border ${dividerBorderColor} text-gray-100`}>\n      <main className='flex-1 grid grid-cols-4'>\n        <HashRouter>\n          <Sidebar />\n        </HashRouter>\n        <Canvas />\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from 'ui/App';\nimport store from 'redux/store';\n\nimport 'index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}